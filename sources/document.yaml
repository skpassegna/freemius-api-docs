openapi: 3.0.0
info:
  title: Freemius API
  description: >-

    ## Welcome to the Freemius API!


    You can use our API to access Freemius API endpoints, which can get
    information on various aspects of Freemius.


    - Manage products.

    - Manage license verifications.

    - Create custom integration with your SaaS.


    If you're using Freemius for a WordPress product, please check out our
    official [SDK](https://github.com/Freemius/wordpress-sdk).


    ### Authorization and Authentication


    We support Bearer authentication. You can get the API Key from the [Freemius
    Developer Dashboard](https://dashboard.freemius.com) for a product or a
    store. More information can be found under the Security section of every
    endpoint.
  termsOfService: 'https://freemius.com/terms/'
  contact:
    name: Freemius Support
    url: 'https://freemius.com'
    email: support@freemius.com
  license:
    name: Proprietary
    url: 'https://freemius.com/terms/'
  version: '1.0'
servers:
  - url: 'https://api.freemius.com/v1'
    description: Production API
  - url: 'http://api.freemius-local.com:8080/v1'
    description: Local development API
    x-internal: true
paths:
  '/developers/{developer_id}/bank_account/{bank_account_id}.json':
    get:
      tags:
        - 'Developer [REMOVE ME]'
      summary: Get bank account
      operationId: 231dd911b043f856b13316c64d64c551
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
      security:
        - ApiAuthFSACookie: []
        - ApiAuthFSAHeader: []
      x-internal: true
    parameters:
      - $ref: '#/components/parameters/developer_id'
      - $ref: '#/components/parameters/bank_account_id'
  '/developers/{developer_id}/login.json':
    post:
      tags:
        - 'Developer [REMOVE ME]'
      summary: Log in
      description: >

        Call this endpoint with your developer email and password and optionally
        2FA auth code to login and set the authorization cookie.


        > This is a public endpoint and does not require any authentication.


        Please note that this endpoint is not meant for public use and should
        only be used by the Freemius Developer Dashboard. The login can expect a
        reCAPTCHA token and it will only work if the reCAPTCHA widget is
        initialized from the Developer Dashboard itself.

        To get API tokens for a product or a store, please do it from the
        Developer Dashboard app itself.
      operationId: 07b078fe8f184259c44607133a2ec92e
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  description: Valid email address.
                  type: string
                  example: jane@freemius.com
                  nullable: false
                password:
                  description: Valid password.
                  type: string
                  nullable: false
                recaptcha_token:
                  description: >-
                    reCAPTCHA token. One must use the Developer Dashboard to get
                    the reCAPTCHA token if the login asks for it.
                  type: string
                remember_me:
                  description: >-
                    Will set the cookie expiration day to 7 days from the
                    successful login if set to `true`. Otherwise, the cookie
                    will expire in 12 hours.
                  type: boolean
                code:
                  description: >-
                    2FA 6 digits code in case developer's auth mode is using
                    TOTP based 2FA apps.
                  type: string
                backup_code:
                  description: >-
                    2FA backup code (24 chars) to disable and bypass 2FA
                    authentication.
                  type: string
              type: object
      responses:
        '200':
          description: Successful login.
          content:
            application/json:
              schema:
                properties:
                  person:
                    $ref: '#/components/schemas/Developer'
                  expires:
                    description: The expiration time of the cookie in seconds.
                    type: integer
                  is_new:
                    description: >-
                      Signal the developer is not new (this is a login, so it
                      must exists), for consistency with the other auth
                      endpoints.
                    type: boolean
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
      security: []
      x-internal: true
    parameters:
      - $ref: '#/components/parameters/developer_id'
  '/products/{product_id}/carts/{cart_id}.json':
    get:
      tags:
        - Cart
      summary: Get cart
      description: >-

        Use this endpoint to get cart details associated with the product.


        ### Enriched Option


        > You can use `enriched=true` to get more details about the cart, for
        example the `gross`, `coupon_code` and `licenses` fields will only be
        returned if enriched is enabled. Please see individual parameters below
        to learn more.
      operationId: 485d7b75d74ff9d57a4791f8122fd287
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: enriched
          in: query
          description: 'Defaults to false, if true returns enriched cart details.'
          schema:
            type: boolean
            default: 'false'
      responses:
        '200':
          description: Cart details associated with the product.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Cart'
                  - properties:
                      gross:
                        description: >-
                          Email of the user associated with the cart. (Only
                          available when `enriched` is set to `true`.)
                        type: number
                        format: float
                        example: '359.64'
                        nullable: true
                      coupon_code:
                        description: >-
                          Coupon code associated with the cart. (Only available
                          when `enriched` is set to `true`.)
                        type: string
                        example: BLACKFRIDAY2024
                        nullable: true
                      licenses:
                        description: >-
                          Number of licenses associated with the cart. (Only
                          available when `enriched` is set to `true`.)
                        type: number
                        example: '10'
                        nullable: true
                    type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
    put:
      tags:
        - Cart
      summary: Update cart
      description: |-

        Use this endpoint to edit a particular cart's details.

        > Updating a completed checkout cart is prohibited.

        > Updating the coupon requires both the `coupon_id` and `coupon_code`.
      operationId: 5c2b102f0678215d850271d51dd83127
      parameters:
        - $ref: '#/components/parameters/fields'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: >-
                All these fields are optional. Note: You can update any of the
                fields. If you don't provide a field, it will remain unchanged.
              properties:
                plan_id:
                  description: The Plan ID.
                  type: number
                  example: '1234'
                pricing_id:
                  $ref: '#/components/schemas/CommonProperties/properties/pricing_id'
                payment_method:
                  $ref: >-
                    #/components/schemas/CommonEnums/properties/PaymentMethodType
                billing_cycle:
                  $ref: '#/components/schemas/CommonEnums/properties/BillingCycle'
                coupon_id:
                  $ref: '#/components/schemas/CommonProperties/properties/coupon_id'
                coupon_code:
                  $ref: '#/components/schemas/CommonProperties/properties/coupon_code'
                country_code:
                  $ref: >-
                    #/components/schemas/CommonProperties/properties/country_code_nullable
                vat_id:
                  $ref: >-
                    #/components/schemas/CommonProperties/properties/vat_id_nullable
                email:
                  $ref: '#/components/schemas/Cart/properties/email'
                first:
                  $ref: '#/components/schemas/Cart/properties/first'
                last:
                  $ref: '#/components/schemas/Cart/properties/last'
                ip:
                  $ref: '#/components/schemas/CommonProperties/properties/ip'
              type: object
      responses:
        '200':
          description: Provides the updated cart with details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
      x-internal: true
    delete:
      tags:
        - Cart
      summary: Delete cart
      description: Use this endpoint to delete a particular cart.
      operationId: fced958ed64a7f027e577b5d73b02c32
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
      x-internal: true
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/cart_id'
  '/products/{product_id}/carts.json':
    get:
      tags:
        - Cart
      summary: List carts
      description: >-

        Use this endpoint to get a collection of carts.


        ### Enriching the Cart details.


        If `enriched=true` you will get more details about the cart for example
        the `gross`, `coupon_code` and `licenses` fields.


        You can use the `filter` or `email` or `count` parameters to get more
        refined results from your query. Please learn more about the individual
        parameters below.
      operationId: ae3156a5cdc40b4c6c9e57ba61a10833
      parameters:
        - name: filter
          in: query
          description: >-
            You can use the `filter` parameter to filter by status. If you don't
            provide a status, the endpoint will return all carts.
          schema:
            type: string
            default: all
            enum:
              - all
              - abandoned
              - completed
              - recovered
              - recovery
              - active
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/fields'
        - name: enriched
          in: query
          description: 'Defaults to false, if true returns enriched cart details.'
          schema:
            type: boolean
            default: 'false'
        - name: email
          in: query
          description: Filter the cart collections by the email address.
          schema:
            type: string
            example: doe@example.com
        - name: count
          in: query
          description: Number of carts to retrieve.
          schema:
            type: integer
            default: '50'
      responses:
        '200':
          description: >-
            Provides a collection of carts associated with the product. All
            carts are listed under the `carts` key.
          content:
            application/json:
              schema:
                properties:
                  carts:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Cart'
                        - properties:
                            gross:
                              description: >-
                                Email of the user associated with the cart.
                                (Only available when `enriched` is set to
                                `true`.)
                              type: number
                              format: float
                              example: '359.64'
                              nullable: true
                            coupon_code:
                              description: >-
                                Coupon code associated with the cart. (Only
                                available when `enriched` is set to `true`.)
                              type: string
                              example: BLACKFRIDAY2024
                              nullable: true
                            licenses:
                              description: >-
                                Number of licenses associated with the cart.
                                (Only available when `enriched` is set to
                                `true`.)
                              type: number
                              example: '10'
                              nullable: true
                          type: object
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
    parameters:
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}/coupons.json':
    get:
      tags:
        - Coupon
      summary: List coupons
      description: >

        Use this endpoint to get all coupons associated with your product or
        store. You can use filtering to search for a particular coupon or a
        group of coupons.


        ### Searching and filtering


        We have the following three parameters to search and filter coupons.


        - `code` - You can explicitly search coupon by the code.

        - `search` - You can search by coupon code or coupon ID.

        - `prefix` - You can filter by coupon code prefix.


        > If using search and filtering, then the `is_enriched` parameter is
        ignored.
      operationId: 0dd074b0092b8c7593a0c471801a0e4d
      parameters:
        - name: code
          in: query
          description: Optional coupon code filter.
          schema:
            type: string
        - name: is_enriched
          in: query
          description: >-
            If `true`, each coupon will include multi-currency discount
            properties. Coupons will only be enriched if no filtering is used.
          schema:
            type: boolean
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - name: prefix
          in: query
          description: Optional coupon code prefix for search coupons.
          schema:
            type: string
        - name: search
          in: query
          description: Optional coupon code(or code part) for search coupons.
          schema:
            type: string
      responses:
        '200':
          description: >-
            Provides a collection of coupons associated with the product. All
            coupons are listed under the `coupons` key.
          content:
            application/json:
              schema:
                properties:
                  coupons:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Coupon'
                        - properties:
                            discounts:
                              type: object
                          type: object
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
    post:
      tags:
        - Coupon
      summary: Create coupon
      description: >-

        Use this endpoint to create a new coupon. You can also use the [Freemius
        Developer Dashboard](https://dashboard.freemius.com) if you want.


        > If you're creating coupon from your SaaS for some specific use case,
        please be sure to set the `plans`, `redemptions_limit`, `end_date`, and
        `is_one_per_user` properties to the appropriate values, to avoid misuse.
      operationId: c46c990442e44802380bf9799e3d163e
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                plans:
                  $ref: '#/components/schemas/Coupon/properties/plans'
                licenses:
                  $ref: '#/components/schemas/Coupon/properties/licenses'
                billing_cycles:
                  $ref: '#/components/schemas/Coupon/properties/billing_cycles'
                user_type:
                  $ref: '#/components/schemas/Coupon/properties/user_type'
                code:
                  $ref: '#/components/schemas/Coupon/properties/code'
                discount:
                  $ref: '#/components/schemas/Coupon/properties/discount'
                discount_type:
                  $ref: '#/components/schemas/CommonEnums/properties/DiscountType'
                start_date:
                  $ref: '#/components/schemas/Coupon/properties/start_date'
                end_date:
                  $ref: '#/components/schemas/Coupon/properties/end_date'
                redemptions_limit:
                  $ref: '#/components/schemas/Coupon/properties/redemptions_limit'
                has_renewals_discount:
                  $ref: '#/components/schemas/Coupon/properties/has_renewals_discount'
                has_addons_discount:
                  $ref: '#/components/schemas/Coupon/properties/has_addons_discount'
                is_one_per_user:
                  $ref: '#/components/schemas/Coupon/properties/is_one_per_user'
                is_active:
                  $ref: '#/components/schemas/Coupon/properties/is_active'
              type: object
      responses:
        '201':
          description: Coupon created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
    parameters:
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}.json':
    get:
      tags:
        - Product
      summary: Get product
      description: Query and retrieve a specific product by ID.
      operationId: 9f9282e9ce536f5455d2ebec6edd51e3
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - Product
      summary: Update product
      operationId: 613d6c91c046a041c99cd44c2ab1c9b3
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                icon:
                  $ref: '#/components/schemas/CommonProperties/properties/icon'
                data:
                  $ref: >-
                    #/components/schemas/CommonRequestSchemas/properties/MultipartJsonData
              type: object
          application/json:
            schema:
              description: Data needed to create or update a product
              properties:
                slug:
                  $ref: '#/components/schemas/Plugin/properties/slug'
                title:
                  $ref: '#/components/schemas/Plugin/properties/title'
                type:
                  $ref: '#/components/schemas/CommonEnums/properties/ProductType'
                plans:
                  $ref: '#/components/schemas/Plugin/properties/plans'
                features:
                  $ref: '#/components/schemas/Plugin/properties/features'
                money_back_period:
                  $ref: '#/components/schemas/Plugin/properties/money_back_period'
                refund_policy:
                  $ref: '#/components/schemas/CommonEnums/properties/RefundPolicy'
                annual_renewals_discount:
                  $ref: >-
                    #/components/schemas/Plugin/properties/annual_renewals_discount
                renewals_discount_type:
                  $ref: >-
                    #/components/schemas/CommonEnums/properties/RenewalsDiscountType
                is_pricing_visible:
                  $ref: '#/components/schemas/Plugin/properties/is_pricing_visible'
                default_plan_id:
                  $ref: '#/components/schemas/Plugin/properties/default_plan_id'
                accepted_payments:
                  description: >-
                    Can be one of the following values: `1` for `PayPal`, `2`
                    for `Credit Cards`, or `0` for both.
                  type: integer
                  enum:
                    - 0
                    - 1
                expose_license_key:
                  description: >-
                    `True` to expose license key to customers upon
                    purchase/subscription. (Available for 'SaaS' products only)
                  type: boolean
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}/installs/{install_id}/clones/{clone_id}.json':
    put:
      tags:
        - Installation
      summary: Resolve clone
      description: Resolve a clone of an install that was created by the product.
      operationId: 18aeecb16ac7e55688d9301d983bd708
      parameters:
        - $ref: '#/components/parameters/fields'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - resolution
              properties:
                resolution:
                  $ref: '#/components/schemas/InstallClone/properties/resolution'
                new_install_id:
                  $ref: '#/components/schemas/InstallClone/properties/new_install_id'
              type: object
      responses:
        '200':
          description: Install clone created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallClone'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      x-internal: true
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
      - $ref: '#/components/parameters/clone_id'
  '/products/{product_id}/installs/{install_id}/clones.json':
    post:
      tags:
        - Installation
      summary: Create clone
      description: >-
        Create a clone of an install associated with the product. Use this
        endpoint if you want to support migration or temporary or long-term
        duplicates for staging purposes.


        By default the clone will be created in a pending state. For our [WP
        SDK](https://freemius.com/help/documentation/wordpress-sdk/safe-mode-clone-resolution-duplicate-website/)
        the clone will be created in a safe mode state.


        After creating the clone, you will need to resolve the clone by updating
        its state and resolution. You will need to handle the licensing logic
        for the new install entity. Our [WP
        SDK](https://freemius.com/help/documentation/wordpress-sdk/safe-mode-clone-resolution-duplicate-website/)
        handles it automatically for WordPress products (plugins and themes).
      operationId: f47c42e6f8efe4aaba145f8606de23b3
      parameters:
        - $ref: '#/components/parameters/fields'
      requestBody:
        content:
          application/json:
            schema:
              required:
                - site_url
              properties:
                site_url:
                  description: The URL of the new site to clone the install to.
                  type: string
                  example: 'https://example.com'
              type: object
      responses:
        '200':
          description: Install clone created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallClone'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      x-internal: true
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
  '/products/{product_id}/installs/count.json':
    get:
      tags:
        - Installation
      summary: Get count
      description: Get the number of installs with the product.
      operationId: 71849c1683baf3c172827a163e1fd702
      parameters:
        - name: plan_id
          in: query
          description: >-
            (optional) Return the count of installs that are associated with a
            non-expired license for the given plan ID.
          schema:
            type: number
            example: 1
        - name: is_active
          in: query
          description: (optional) Return active installs only.
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: The number of installs with the product.
          content:
            application/json:
              schema:
                properties:
                  count:
                    type: integer
                    minimum: 0
                    example: 123
                type: object
    parameters:
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}/installs/{install_id}/downgrade.json':
    put:
      tags:
        - Installation
      summary: Downgrade to default plan
      description: >-
        Downgrade install's plan to product’s default plan. This is usually the
        free plan.
      operationId: e94541bf181b2d3894ae3ee877f0606d
      parameters:
        - $ref: '#/components/parameters/fields'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                deactivate_license:
                  description: Deactivate license.
                  type: boolean
                reason_ids:
                  $ref: '#/components/schemas/Uninstall/properties/reason_id'
                reason:
                  $ref: '#/components/schemas/Uninstall/properties/reason_info'
              type: object
      responses:
        '200':
          description: Product plan downgraded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Install'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
  '/products/{product_id}/installs/{install_id}/events.json':
    get:
      tags:
        - Installation
      summary: List events
      description: Get events collection for an install.
      operationId: e8b5ed3ca94eed859dead50570c69db9
      parameters:
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/fields'
        - name: type
          in: query
          description: Filter events by type string or event name.
          schema:
            type: string
            example: license.activated
      responses:
        '200':
          description: Events triggered by the install.
          content:
            application/json:
              schema:
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventLog'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
  '/products/{product_id}/installs/{install_id}.json':
    get:
      tags:
        - Installation
      summary: Get install
      description: Get the install details.
      operationId: 8c38c66564fc43f193dbd8517e118da6
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: The install details.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Install'
                  - properties:
                      is_beta:
                        description: >-
                          Whether the install is participating in the beta
                          program.
                        type: boolean
                    type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - Installation
      summary: Update install
      description: Update a product install details.
      operationId: 83213aa880848344f45876c7450c2a52
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                uid:
                  $ref: '#/components/schemas/CommonProperties/properties/uid'
                license_key:
                  $ref: '#/components/schemas/License/properties/secret_key'
                url:
                  $ref: '#/components/schemas/Install/properties/url'
                title:
                  $ref: '#/components/schemas/Install/properties/title'
                version:
                  $ref: '#/components/schemas/Install/properties/version'
                sdk_version:
                  $ref: '#/components/schemas/Install/properties/sdk_version'
                platform_version:
                  $ref: '#/components/schemas/Install/properties/platform_version'
                programming_language_version:
                  $ref: >-
                    #/components/schemas/Install/properties/programming_language_version
                plan_id:
                  $ref: '#/components/schemas/CommonProperties/properties/id'
                trial_plan_id:
                  $ref: '#/components/schemas/Install/properties/trial_plan_id'
                trials_ends:
                  description: The datetime that the trial expires.
                  type: string
                  format: date-time
                  example: '2025-01-01 00:00:00'
                subscription_id:
                  $ref: '#/components/schemas/CommonProperties/properties/id'
                is_locked:
                  $ref: '#/components/schemas/Install/properties/is_locked'
                is_active:
                  $ref: '#/components/schemas/Install/properties/is_active'
                is_disconnected:
                  $ref: '#/components/schemas/Install/properties/is_disconnected'
                is_premium:
                  $ref: '#/components/schemas/Install/properties/is_premium'
                is_sdk_required:
                  $ref: '#/components/schemas/Plugin/properties/is_sdk_required'
                reason_id:
                  $ref: '#/components/schemas/Uninstall/properties/reason_id'
                reason_info:
                  $ref: '#/components/schemas/Uninstall/properties/reason_info'
                plugins:
                  description: The site plugins installed.
                  type: string
                themes:
                  description: The site themes installed.
                  type: string
                is_beta:
                  $ref: '#/components/schemas/BetaParticipation/properties/is_beta'
                recover:
                  description: Recover the install.
                  type: boolean
                is_uninstalled:
                  $ref: '#/components/schemas/Install/properties/is_uninstalled'
                user_id:
                  description: >-
                    The ID of the user. This is used for ownership change of the
                    install.
                  type: string
                  format: int64
                  minimum: 1
                  example: '1234'
                user_email:
                  description: >-
                    The email of the user. This is used for ownership change of
                    the install.
                  type: string
                  example: foo@example.com
                install_ids:
                  description: >-
                    A comma seperated string of Install IDs. This is used for
                    ownership change of the install.
                  type: array
                  items:
                    type: string
                  example: '1234,2478,2345'
              type: object
      responses:
        '200':
          description: Install updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Install'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Installation
      summary: Delete install
      description: Delete a product install. This is different from an uninstall.
      operationId: 355ff8c0555be1dcadddbc3d1db5c516
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
  '/products/{product_id}/installs.json':
    get:
      tags:
        - Installation
      summary: List installs
      description: >-
        Get the collection of installs. Various filtering and search parameters
        are available to narrow down the results.
      operationId: bf23fa85101b80f4c3b781c88352c7d2
      parameters:
        - name: ids
          in: query
          description: Install IDs collection to filter.
          schema:
            type: string
            format: comma-separated
            example: '1234,2478,2345'
        - name: filter
          in: query
          description: Install status to filter the installs by.
          schema:
            type: string
            enum:
              - all
              - active
              - inactive
              - trial
              - paying
              - uninstalled
              - active_premium
              - active_free
        - name: version
          in: query
          description: Plugin version to filter the installs by.
          schema:
            type: string
        - name: license_id
          in: query
          description: License ID to filter the installs by.
          schema:
            type: integer
        - name: plan_id
          in: query
          description: Plan ID to filter the installs by.
          schema:
            type: integer
        - name: title
          in: query
          description: Install title to filter the installs by.
          schema:
            type: string
        - name: url
          in: query
          description: Install URL to filter the installs by.
          schema:
            type: string
        - name: search
          in: query
          description: >-
            Search item to filter the installs by e.g. domain, site_id, or
            reason info.
          schema:
            type: string
        - name: all
          in: query
          description: 'If true, loads all installs, including the uninstalled ones.'
          schema:
            type: boolean
            default: false
        - name: reason_id
          in: query
          description: Reason ID (either string or numeric) to filter the installs by.
          schema:
            type: string
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Installs collection
          content:
            application/json:
              schema:
                properties:
                  installs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Install'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}/installs/{install_id}/license.json':
    get:
      tags:
        - Installation
      summary: Get active license by UID
      description: >-
        Retrieves the full information about the active license for the
        specified install when the UID of the install is known.


        > This is a public endpoint.


        Use this endpoint to retrieve the license information without needing to
        use the `Authorization` header.
      operationId: a0e312509977cd88004eafa9be8b625a
      parameters:
        - name: license_key
          in: query
          description: The license key used for the activation of the install.
          required: true
          schema:
            $ref: '#/components/schemas/License/properties/secret_key'
        - $ref: '#/components/parameters/uid'
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          $ref: '#/components/responses/400'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
      security: []
    parameters:
      - $ref: '#/components/parameters/install_id'
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}/installs/{install_id}/licenses/{license_id}.json':
    get:
      tags:
        - Installation
      summary: Get active license by ID
      description: >-
        Get specific license of the install when the license ID and the license
        key are known but the UID of the install is not known.


        Use this endpoint to retrieve the license information without needing
        the UID of the install, but it requires product level authorization.
      operationId: 0260af8a05cb743e2d16adc4e9b04ed0
      parameters:
        - $ref: '#/components/parameters/fields'
        - name: license_key
          in: query
          description: The license key used on the install.
          required: true
          schema:
            $ref: '#/components/schemas/License/properties/secret_key'
      responses:
        '200':
          description: Install's licence
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - Installation
      summary: Activate license
      description: Activate license for install.
      operationId: 968a73ecda040bbccd98e2b8a9dee405
      parameters:
        - name: license_key
          in: query
          description: The license key received from the checkout.
          required: true
          schema:
            type: string
        - name: is_enriched
          in: query
          description: >-
            If `true`, the parent license's and plan's info will be included in
            the result if there's any.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Activated licence.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Installation
      summary: Deactivate license
      description: Deactivate license from an install.
      operationId: 4b7455024dd6309416024095ca87dd90
      parameters:
        - name: license_key
          in: query
          description: The same license key used to activate the install.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Activated licence.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
      - $ref: '#/components/parameters/license_id'
  '/products/{product_id}/installs/{install_id}/licenses.json':
    get:
      tags:
        - Installation
      summary: List active licenses
      description: >-
        Get active licenses (usually only one) on an install. Use this endpoint
        only the ID of the license is unknown.
      operationId: 6b9945f716373c0eba22aa15085b58ec
      parameters:
        - name: is_enriched
          in: query
          description: >-
            If `true`, the parent license's and plan's info will be included in
            the result if there's any.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Active license.
          content:
            application/json:
              schema:
                properties:
                  licenses:
                    type: array
                    items:
                      $ref: '#/components/schemas/License'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
  '/products/{product_id}/installs/{install_id}/licenses/{license_id}/subscriptions.json':
    get:
      tags:
        - Installation
      summary: List license subscriptions
      description: >-
        Get a collection of subscriptions for a particular license. A license
        can have one active and multiple inactive subscriptions. Subscriptions
        are inactivated when a license is downgraded or upgraded or when the
        payment method is updated.
      operationId: 500d26b9d843d0fe80e297d5325be5e3
      parameters:
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Subscriptions collection.
          content:
            application/json:
              schema:
                properties:
                  subscriptions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Subscription'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
      - $ref: '#/components/parameters/license_id'
  '/products/{product_id}/installs/{install_id}/market_items.json':
    get:
      tags:
        - Installation
      summary: List market items
      description: >-
        Retrieves all market items associated with an `Install` entity. Market
        items are other products (not necessarily powered by Freemius) that are
        installed in the same site as the Freemius powered product.


        > Only after the user chooses to opt-in, such data is collected and sent
        to Freemius.


        Right now we only support WordPress products, i.e, plugins and themes.
      operationId: 0fc20dda966630ea5815941d09f93ff7
      responses:
        '200':
          description: All market items associated with the install.
          content:
            application/json:
              schema:
                properties:
                  market_items:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/MarketItem'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
  '/products/{product_id}/installs/{install_id}/payments.json':
    get:
      tags:
        - Installation
      summary: List payments
      description: >-
        Get payments associated with the install. This lists all payments
        collected from the license activated on this install.
      operationId: dd6213a3d1df7ef17effc94b783d8033
      parameters:
        - name: extended
          in: query
          description: >-
            If `true`, loads linked user email, install URL, subscription
            billing cycle and plan name.
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Payments collection
          content:
            application/json:
              schema:
                properties:
                  payments:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Payment'
                        - properties:
                            email:
                              $ref: '#/components/schemas/User/properties/email'
                            url:
                              $ref: '#/components/schemas/Install/properties/url'
                            billing_cycle:
                              $ref: >-
                                #/components/schemas/CommonEnums/properties/BillingCycle
                            plan_name:
                              $ref: '#/components/schemas/Plan/properties/name'
                            refund_reason:
                              description: 512-character reason for the refund.
                              type: string
                              nullable: true
                          type: object
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
  '/products/{product_id}/installs/{install_id}/permissions.json':
    put:
      tags:
        - Installation
      summary: Update permissions
      description: Update permissions to a product install.
      operationId: 82e4bfd18f1abb22a31c3e090265bbe2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                is_enabled:
                  description: Whether to enable the selected permission.
                  type: boolean
                permissions:
                  description: >-
                    Comma separated list of permissions to update. Allowed
                    values are `site`, `user`, `extensions`.
                  type: string
                  format: csv
                  example: 'site,user,extensions'
                  nullable: false
              type: object
      responses:
        '200':
          description: Install permission updated.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/InstallMetadata'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
  '/products/{product_id}/installs/{install_id}/plans/{plan_id}.json':
    get:
      tags:
        - Installation
      summary: Get plan
      description: Get the plan available from the product the install belongs to.
      operationId: 68c93ac2657c0e11d1df097eccfda959
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Install Plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
      - $ref: '#/components/parameters/plan_id'
  '/products/{product_id}/installs/{install_id}/plans.json':
    get:
      tags:
        - Installation
      summary: List plans
      description: Get all the product plans for an install.
      operationId: b255b6d08d0a1939ae7de9fd11375d0a
      parameters:
        - name: show_pending
          in: query
          description: Show all plans whether released to customers or hidden.
          required: false
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Install Plans
          content:
            application/json:
              schema:
                properties:
                  plans:
                    type: array
                    items:
                      $ref: '#/components/schemas/Plan'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
  '/products/{product_id}/installs/{install_id}/plans/{plan_id}/pricing/{pricing_id}/licenses.json':
    post:
      tags:
        - Installation
      summary: Create new license
      description: |-

        Create a new license and assign it to the install.

        Note: Either `period` or `expires_at` must be set.
      operationId: e7743825cdcbd849fd2348ab19ff9b44
      parameters:
        - $ref: '#/components/parameters/fields'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                is_block_features:
                  $ref: '#/components/schemas/License/properties/is_block_features'
                period:
                  $ref: '#/components/schemas/CommonEnums/properties/BillingCycle'
                expires_at:
                  $ref: '#/components/schemas/License/properties/expiration'
                send_email:
                  description: >-
                    Whether or not to email the license key and download link to
                    the user.
                  type: boolean
              type: object
      responses:
        '200':
          description: License created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
      - $ref: '#/components/parameters/plan_id'
      - $ref: '#/components/parameters/pricing_id'
  '/products/{product_id}/installs/{install_id}/plans/{plan_id}/trials.json':
    post:
      tags:
        - Installation
      summary: Start trial
      description: >-
        Start trial for a plan for an install. The install must not have
        utilized the trial before.
      operationId: 6acf6cdbff82bb302416659226050dda
      parameters:
        - $ref: '#/components/parameters/fields'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                trial_ends:
                  description: >-
                    The expiry date of the trial. If set, will set the trial
                    expiration based on that parameter. **Note:** Trial
                    expiration date cannot exceed the maximum trial period days
                    based on the plan configuration.
                  type: string
                  format: date-time
                  example: '2025-01-01 00:00:00'
                phone:
                  description: >-
                    The phone number of the user. If provided, the billing info
                    of the user will be updated.
                  type: string
                  format: phone
                  example: 555 55 55
                is_migration:
                  description: >-
                    Whether emails will be sent to users or log events. If
                    `true`, no emails will be sent nor events logged.
                  type: boolean
                trial_token:
                  description: Security token for sandbox mode trial.
                  type: string
                trial_timestamp:
                  description: Security timestamp for sandbox mode trial.
                  type: string
                  example: '1730160000'
              type: object
      responses:
        '200':
          description: Started Trial
          content:
            application/json:
              schema:
                properties:
                  trial:
                    $ref: '#/components/schemas/Trial'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
      - $ref: '#/components/parameters/plan_id'
  '/products/{product_id}/installs/{install_id}/uninstall.json':
    get:
      tags:
        - Installation
      summary: Get uninstall details
      description: Get install's uninstall details.
      operationId: aa93076dae70788a35d0d936baed5824
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: The uninstall details.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Uninstall'
                  - properties:
                      reason:
                        description: >-
                          The reason for the uninstall which translates to the
                          string value of the uninstall `reason_id`.
                        type: string
                    type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
  '/products/{product_id}/installs/{install_id}/updates.json':
    get:
      tags:
        - Installation
      summary: List updates
      description: Get available updates collection.
      operationId: 44dd43bb3fa2fa9cae36150c52c03abb
      parameters:
        - name: version
          in: query
          description: >-
            The product's version of the current install. The endpoint will
            return newer versions when set. This is a required param unless
            `older_than` is provided.
          required: true
          schema:
            type: string
            example: 1.0.0
        - name: older_than
          in: query
          description: >-
            If provided, only versions that are older than this will be
            returned.
          schema:
            type: string
            example: 1.0.0
        - name: type
          in: query
          description: >-
            The product type. If the type provide is `all`, the latest
            `released` or `pending` version will be returned, whichever has the
            higher version.
          schema:
            type: string
            default: released
            enum:
              - released
              - pending
              - beta
              - all
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Updates collection.
          content:
            application/json:
              schema:
                properties:
                  tags:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/PluginTag'
                        - properties:
                            is_released:
                              $ref: >-
                                #/components/schemas/Plugin/properties/is_released
                            url:
                              description: >-
                                The Installation zip file URL with
                                authentication token.
                              type: string
                              example: 'https://example.com/'
                          type: object
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
  '/products/{product_id}/installs/{install_id}/updates/latest.json':
    get:
      tags:
        - Installation
      summary: Latest update
      description: Get the latest update.
      operationId: 89861be4fbe6f076a86d59086d25cd35
      parameters:
        - name: is_premium
          in: query
          description: >-
            If set, tries to fetch the requested version. If requires premium
            but no license, will throw an error. Otherwise, fetch version based
            on license.
          schema:
            type: boolean
        - name: readme
          in: query
          description: 'If set, tries to fetch the readme information.'
          schema:
            type: boolean
        - name: newer_than
          in: query
          description: >-
            If set, return the latest version's data only if it's newer than
            this property's value.
          schema:
            type: boolean
        - name: type
          in: query
          description: >-
            The product type. If the type provided is `all`, the latest
            `released`, `beta`,  or `pending` version will be returned,
            whichever has the higher version.
          schema:
            type: string
            default: released
            enum:
              - released
              - pending
              - beta
              - all
      responses:
        '200':
          description: Updates collection.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PluginTag'
                  - properties:
                      is_released:
                        $ref: '#/components/schemas/Plugin/properties/is_released'
                      url:
                        description: >-
                          The Installation zip file URL with authorization
                          token.
                        type: string
                        example: 'https://example.com/'
                    type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
  '/products/{product_id}/installs/{install_id}/users/{user_id}/verify.json':
    put:
      tags:
        - Installation
      summary: Send verification email
      description: >-
        Sends an email to the user associated with the install, containing a
        link to verify the email address. With the `after_email_confirm_url`
        parameter, you can specify a URL address that the user will be auto
        forwarded to after email confirmation is clicked.
      operationId: 6d565317df6bdc108a4d7f75dfd1f7ee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                after_email_confirm_url:
                  description: >-
                    URL address that the user will be auto forwarded to after
                    email confirmation is clicked.
                  type: string
                  example: 'https://example.com/email-confirmation/'
              type: object
      responses:
        '200':
          description: Successful operation.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
      x-internal: true
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/install_id'
      - $ref: '#/components/parameters/user_id'
  '/products/{product_id}/licenses/activate.json':
    post:
      tags:
        - License
      summary: Activate license
      description: >-
        Activate a license and create an install if needed with the given
        properties. Unlike other activation endpoints, this one is not requiring
        an AUTH header (i.e. public endpoint).


        If the provided license doesn't have an associated user, the endpoint
        will require the `first_name`, `last_name`, and `user_email` parameters
        to create a new user and associate it with the license.
      operationId: 2ad3bd67def4192619dc468ba36257fa
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - uid
                - license_key
              properties:
                uid:
                  $ref: '#/components/schemas/CommonProperties/properties/uid'
                license_key:
                  $ref: '#/components/schemas/License/properties/secret_key'
                url:
                  description: Site's homepage URL.
                  type: string
                title:
                  description: Site's title.
                  type: string
                version:
                  description: Product's version.
                  type: string
                is_marketing_allowed:
                  description: Whether the user has given their consent to marketing.
                  type: boolean
                install_id:
                  description: >-
                    Install ID when activating on an already existing install.
                    If provided must belong to the same user as the license
                    owner and must have the same UID. The new license will be
                    activated for the install and existing one will be
                    deactivated.
                  type: integer
                first_name:
                  description: >-
                    First name of the user (only needed when activating a ghost
                    license).
                  type: string
                last_name:
                  description: >-
                    Last name of the user (only needed when activating a ghost
                    license).
                  type: string
                user_email:
                  description: >-
                    Email address of the user (only needed when activating a
                    ghost license).
                  type: string
              type: object
      responses:
        '200':
          description: License activated successfully.
          content:
            application/json:
              schema:
                properties:
                  user_id:
                    $ref: '#/components/schemas/CommonProperties/properties/id'
                  user_secret_key:
                    $ref: '#/components/schemas/User/properties/secret_key'
                  user_public_key:
                    $ref: '#/components/schemas/User/properties/public_key'
                  plugin_id:
                    $ref: '#/components/schemas/CommonProperties/properties/id'
                  license_plan_name:
                    $ref: '#/components/schemas/Plan/properties/name'
                  is_marketing_allowed:
                    description: Whether marketing is allowed.
                    type: boolean
                    nullable: true
                  install_id:
                    $ref: '#/components/schemas/CommonProperties/properties/id'
                  install_secret_key:
                    $ref: '#/components/schemas/Install/properties/secret_key'
                  install_public_key:
                    $ref: '#/components/schemas/Install/properties/public_key'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
      security: []
    parameters:
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}/licenses/deactivate.json':
    post:
      tags:
        - License
      summary: Deactivate license
      description: >-
        Deactivate a license on an install. Unlike other deactivation endpoints,
        this one is not requiring an AUTH header (i.e. public endpoint).
      operationId: f1de6472b8cd91606233fadd6e00854e
      parameters:
        - $ref: '#/components/parameters/fields'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - uid
                - install_id
                - license_key
              properties:
                uid:
                  $ref: '#/components/schemas/CommonProperties/properties/uid'
                install_id:
                  description: >-
                    Install ID from which the license should be deactivated. The
                    license must be active on the install.
                  type: integer
                license_key:
                  $ref: '#/components/schemas/License/properties/secret_key'
              type: object
      responses:
        '200':
          description: License deactivated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Install'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
      security: []
    parameters:
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}/licenses.json':
    get:
      tags:
        - License
      summary: List licenses
      description: Retreive a product's licenses collection.
      operationId: 413b2a1b3f0e08fbede787d8a2cd3536
      parameters:
        - name: filter
          in: query
          description: Filter licenses by status.
          schema:
            type: string
            enum:
              - active
              - cancelled
              - expired
              - abandoned
              - migrated
            example: active
        - name: plan_id
          in: query
          description: Filter licenses by plan ID.
          schema:
            type: number
            example: 123
        - name: search
          in: query
          description: Search license id or key.
          schema:
            type: string
            example: '123'
        - name: enriched
          in: query
          description: 'If `true`, returns the associated user information.'
          schema:
            type: boolean
            default: false
            example: true
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/fields'
        - name: source
          in: query
          description: >-
            If set, returns only licenses that are associated with the given
            source ID.
          schema:
            type: number
            example: 123
      responses:
        '200':
          description: Licenses retrieved.
          content:
            application/json:
              schema:
                properties:
                  licenses:
                    type: array
                    items:
                      $ref: '#/components/schemas/LicenseEnriched'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - License
      summary: Assign license
      description: >-
        Associate an orphan license with a user and send a welcome email. If the
        user does not exist yet, one will be created.
      operationId: 9adc46f204c0eeaa48155cece222793c
      parameters:
        - $ref: '#/components/parameters/fields'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - license_key
              properties:
                email:
                  description: User's email address.
                  type: string
                  example: foo@example.com
                name:
                  description: User's full name.
                  type: string
                  example: John Doe
                license_key:
                  $ref: '#/components/schemas/License/properties/secret_key'
                is_marketing_allowed:
                  $ref: '#/components/schemas/User/properties/is_marketing_allowed'
              type: object
      responses:
        '200':
          description: License assigned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}/licenses/{license_id}/installs.json':
    delete:
      tags:
        - License
      summary: Deactivate installs
      description: Deactivate license from all installs.
      operationId: a0a807e39928e2c779c0026c7eb3cdf6
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Licenses deactivated from all installs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/license_id'
  '/products/{product_id}/payments/{payment_id}.json':
    get:
      tags:
        - Payment
      summary: Get payment
      description: Get specific payment by ID.
      operationId: 74c2a8e69a5e8cafeb0f1e23718d6261
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Get specific payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/payment_id'
  '/products/{product_id}/payments.json':
    get:
      tags:
        - Payment
      summary: List payments
      description: >-
        List all payments associated with the product.


        ### Filtering and searching


        There are various parameters to help you search and/or filter payments.


        - `search` - You can search by `payment_id`, `external_payment_id`, or
        `user_email`. It can be a number or string.

        - `user_id` - If you are looking to list all payments for a specific
        user use this.

        - `billing_cycle` - Filter payments by billing cycle. `0` means lifetime
        payments.

        - `currency` - Filter payments by currency.

        - `coupon_id` - Filter payments by coupon ID.

        - `filter` - Filter payments by different types: `all`, `refunds`,
        `not_refunded`, `disputed`, `won_disputes`, `chargebacks`.


        Please see the parameters for more information.
      operationId: 32b28e581f1cb010f5a5ef5179fae3f9
      parameters:
        - name: search
          in: query
          description: 'Search by `payment_id`, `external_payment_id`, or `user_email`.'
          schema:
            type: string
        - name: search_user_id
          in: query
          description: User ID to filter with.
          schema:
            $ref: '#/components/schemas/CommonProperties/properties/user_id'
        - $ref: '#/components/parameters/billing_cycle'
        - name: currency
          in: query
          schema:
            $ref: '#/components/schemas/CommonEnums/properties/Currency'
        - name: coupon_id
          in: query
          description: Filter payments by coupon ID.
          schema:
            $ref: '#/components/schemas/CommonProperties/properties/id'
        - name: filter
          in: query
          description: Filter payments by different types
          schema:
            type: string
            default: all
            enum:
              - all
              - refunds
              - not_refunded
              - disputed
              - won_disputes
              - chargebacks
        - name: extended
          in: query
          description: 'If true, loads linked user, plan and subscription.'
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Get payments collection.
          content:
            application/json:
              schema:
                properties:
                  payments:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Payment'
                        - properties:
                            email:
                              $ref: '#/components/schemas/User/properties/email'
                            url:
                              $ref: '#/components/schemas/Install/properties/url'
                            billing_cycle:
                              $ref: >-
                                #/components/schemas/CommonEnums/properties/BillingCycle
                            plan_name:
                              description: Name of the plan the payment is associated with.
                              type: string
                            refund_reason:
                              description: >-
                                If the payment is refunded, this will contain
                                the reason.
                              type: string
                          type: object
                  discounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Discount'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}/ping.json':
    get:
      tags:
        - Product
      summary: Ping
      description: >-
        Ping the product to get the timestamp and whether to implement GDPR
        compliance based on the client's location. This is a public endpoint.
      operationId: a39cba36cce100b33834ec9c9e8e8d0d
      parameters:
        - name: uid
          in: query
          description: >-
            Unique identifier of the caller. The UID must be same when pinging
            and when activating or deactivating a license. The generation of the
            UID is a responsibility of the client.
          required: true
          schema:
            $ref: '#/components/schemas/CommonProperties/properties/uid'
        - name: is_update
          in: query
          description: If the call is during a product update.
          schema:
            type: boolean
            default: false
        - name: is_gdpr_test
          in: query
          description: >-
            Whether the request is made for testing GDPR compliance from the
            client of the product.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Response from the product
          content:
            application/json:
              schema:
                properties:
                  api:
                    description: Just a "pong" to annotate the success.
                    type: string
                    enum:
                      - pong
                    example: pong
                  is_gdpr_required:
                    description: Whether GDPR compliance is required for the client.
                    type: boolean
                    example: false
                  timestamp:
                    description: >-
                      Timestamp in [RFC 2822](http://www.faqs.org/rfcs/rfc2822)
                      or [RFC 5322](http://www.faqs.org/rfcs/rfc5322) format.
                    type: string
                    format: rfc-2822
                    example: 'Thu, 21 Jan 2021 12:00:00 +0000'
                  is_active:
                    description: >-
                      Whether the product is active. Only returned when
                      `is_update` is true in the request.
                    type: boolean
                    example: true
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      x-internal: true
    parameters:
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}/settings/{setting_id}.json':
    get:
      tags:
        - Product
      summary: Get settings
      description: >-
        Get a specific product's setting by ID. Different settings are used for
        different functionalities around product. Please use the Developer
        Dashboard instead to modify the functionality.
      operationId: 98217afc45ae7d292fb419bb32d1f47b
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: The product setting.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
      x-internal: true
    put:
      tags:
        - Product
      summary: Update settings
      description: >-
        Update a specific product's settings. Different settings are used for
        different functionalities around product. Please use the Developer
        Dashboard instead to modify the functionality.
      operationId: d8d3ed781d53dddc6c5c5c1dd7a3cc96
      parameters:
        - $ref: '#/components/parameters/fields'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  $ref: '#/components/schemas/Setting/properties/data'
              type: object
      responses:
        '200':
          description: Updated product settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
      x-internal: true
    delete:
      tags:
        - Product
      summary: Delete settings
      description: Delete a specific product's settings by ID.
      operationId: 8b488f3620dd86ac6bf3112091e3b993
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
      x-internal: true
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/setting_id'
  '/products/{product_id}/subscriptions/{subscription_id}.json':
    get:
      tags:
        - Subscription
      summary: Get subscription
      description: Retrieve subscription
      operationId: f9532e34a101073fb345f3d0c2d12ca0
      parameters:
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Subscription retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - Subscription
      summary: Update subscription
      description: >-
        Update subscription's auto-renewal status and activate a cancellation
        coupon. To cancel a subscription please use the [Developer
        Dashboard](https://dashboard.freemius.com).
      operationId: ccd4293c2a27e5201da3bc9100aed85e
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                auto_renew:
                  description: >-
                    Logs an event that confirms the user requested that the
                    subscription will continue to auto-renew.
                  type: boolean
                coupon_id:
                  description: >-
                    An optional subscription cancellation coupon ID. The coupon
                    must be set as a special "Cancellation Coupon" in the
                    Freemius Developer Dashboard. If provided the discount will
                    be applied to the next renewals.
                  type: integer
              type: object
      responses:
        '200':
          description: Subscription retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/subscription_id'
  '/products/{product_id}/subscriptions.json':
    get:
      tags:
        - Subscription
      summary: List subscriptions
      description: >-

        Use this endpoint to get all subscriptions associated with your product.
        Subscriptions are created when someone purchases your product using the
        [Freemius Checkout](https://freemius.com/wordpress/checkout/).


        ### Searching and filtering

        There are various parameters to help you search and/or filter
        subscription.

        - You can search by subscription ID, external subscription ID, or user
        email.

        - You can also filter by billing cycle, gateway, plan ID, and
        subscription status.

        Please see the parameters for more information.
      operationId: 154c4d358b3865e58bfb804d7a34fd17
      parameters:
        - name: search
          in: query
          description: >-
            Optional search: subscription id, external subscription id or user
            email
          schema:
            type: string
        - $ref: '#/components/parameters/billing_cycle'
        - $ref: '#/components/parameters/gateway'
        - name: filter
          in: query
          description: >-
            Optional filtering based on the status of the subscription. Defaults
            to `all`.
          schema:
            type: string
            default: all
            enum:
              - all
              - active
              - cancelled
        - name: extended
          in: query
          description: >-
            When set to `true` enrich the subscriptions with the plan name,
            install URL & title, and user email.
          schema:
            type: boolean
            example: 'false'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/fields'
        - name: sort
          in: query
          description: 'The sort order of the subscriptions. Example: -id. Default: -id.'
          schema:
            type: string
            enum:
              - id
              - next_payment
            example: '-id'
      responses:
        '200':
          description: >-
            Provides a collection of subscriptions associated with the product.
            All subscriptions are listed under the `subscriptions` key.
          content:
            application/json:
              schema:
                properties:
                  subscriptions:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Subscription'
                        - properties:
                            plan_name:
                              description: >-
                                Name of the plan associated with the
                                subscription. (Only available when `extended` is
                                set to `true`.)
                              type: string
                              example: Professional
                              nullable: true
                            email:
                              description: >-
                                Email of the user associated with the
                                subscription. (Only available when `extended` is
                                set to `true`.)
                              type: string
                              example: foo@freemius.com
                              nullable: true
                            url:
                              description: >-
                                URL of the installation associated with the
                                subscription. (Only available when `extended` is
                                set to `true`.)
                              type: string
                              example: 'https://example.com'
                              nullable: true
                            title:
                              description: >-
                                Title of the installation associated with the
                                subscription. (Only available when `extended` is
                                set to `true`.)
                              type: string
                              example: Website title
                              nullable: true
                          type: object
                  discounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Discount'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
    parameters:
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}/trials.json':
    get:
      tags:
        - Trial
      summary: List trials
      description: >-
        List all trials of the product. To support trials, configure your
        product to [offer
        trial](https://freemius.com/help/documentation/selling-with-freemius/free-trials/)
        and then users can use the [Freemius
        Checkout](https://freemius.com/help/documentation/selling-with-freemius/freemius-checkout-buy-button/)
        to start a trial. You will need to pass `trial=paid` or `trial=free` to
        the Checkout's paramters to start a trial.
      operationId: 7a2f5d150cb2a5bc48eafb2a81a40f41
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: Get trials collection.
          content:
            application/json:
              schema:
                properties:
                  trials:
                    type: array
                    items:
                      $ref: '#/components/schemas/Trial'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}/users.json':
    get:
      tags:
        - User
      summary: List users
      description: >

        Gets users collection associated with the given product.


        ## Filtering

        There are a few filters that can be applied to the request.


        ### Search by email

        You can specify the parameter `email` to filter the users by email.
        Optionally you can also put a valid email in the `search` parameter.


        ### Other filtering options

        The `search` parameter also accepts the following values:


        1. User ID (number).

        2. Full or partial name (string).

        3. Full or partial email (string).


        ## Pagination

        You can use the combination of `count` and `offset` parameters to
        paginate the results.
      operationId: 31e2d76495d3306e87328fd0b7a60a4f
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - User
      summary: Create user
      description: >-

        Use this endpoint to create a new user for the product. If the user
        already exists in Freemius, it will be linked to the product.


        > User can only be created for products with elevated permissions or
        during data migration.


        ## Migrating users from other platforms


        Freemius allows to migrate your users from other platforms. To do so,
        you need to set the `is_migration` parameter to `true`. This will
        prevent any emails from being sent to the users and will not log any
        events.

        Once migrated the user can use their existing licenses to activate your
        product.
      operationId: a11a40bbb88e5d40664b061b3f53362e
      parameters:
        - $ref: '#/components/parameters/fields'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  description: Valid email address.
                  type: string
                  nullable: false
                password:
                  description: Valid password. Must have at least 8 characters.
                  type: string
                  nullable: false
                ip:
                  description: (optional) IPv4 or IPv6 Address
                  type: string
                name:
                  description: >-
                    (optional) Full name property. If not specified, `first` and
                    `last` must be provided instead.
                  type: string
                first:
                  description: >-
                    (optional) First name. `Required` if no valid `name` was
                    provided.
                  type: string
                last:
                  description: >-
                    (optional) Last name. `Required` if no valid `name` was
                    provided.
                  type: string
                picture:
                  description: (optional) Profile picture URL.
                  type: string
                is_verified:
                  description: >-
                    (optional) Tells if person is already verified, defaults to
                    FALSE.
                  type: boolean
                after_email_confirm_url:
                  description: >-
                    (optional) URL address that the user will be auto forwarded
                    to after email confirmation is clicked.
                  type: string
                send_verification_email:
                  description: >-
                    (optional) Defaults to TRUE. If `false`, email verification
                    message will NOT be sent after registration.
                  type: boolean
                is_marketing_allowed:
                  description: >-
                    (optional) Whether or not the user has given their consent
                    to market.
                  type: boolean
                is_migration:
                  description: >-
                    (optional) If `true`, no emails will be sent to users nor
                    events will be logged.
                  type: string
                source:
                  $ref: '#/components/schemas/Migration/properties/source_external_id'
              type: object
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
    parameters:
      - $ref: '#/components/parameters/product_id'
  '/products/{product_id}/users/{user_id}/installs.json':
    get:
      tags:
        - User
      summary: List installs
      description: >-
        Get the collection of installs. Various filtering and search parameters
        are available to narrow down the results.
      operationId: 3d73821afe0cac2204db7704e9409c51
      parameters:
        - name: install_ids
          in: query
          description: Comma-separated install IDs list to filter.
          schema:
            type: string
            format: comma-separated
          example: '1234,2478,2345'
        - name: license_id
          in: query
          description: >-
            License ID filter. If set, return installs that are linked to the
            specified license.
          schema:
            type: integer
        - name: plan_id
          in: query
          description: >-
            Plan ID filter. If set, return installs associated with the given
            plan.
          schema:
            type: integer
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/fields'
      responses:
        '200':
          description: Installs collection
          content:
            application/json:
              schema:
                properties:
                  installs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Install'
                type: object
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/user_id'
  '/products/{product_id}/users/{user_id}/licenses.json':
    get:
      tags:
        - User
      summary: List licenses
      description: Get user's licenses collection.
      operationId: 9d9c289aea6230507fc2c1530a05fc14
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/count'
        - name: license_key
          in: query
          description: Get specific license by its key.
          schema:
            type: string
        - name: ids
          in: query
          description: Comma-separated license IDs.
          schema:
            type: string
        - name: license_keys
          in: query
          description: >-
            Get specific multiple license with a comma-separated string of their
            license keys.
          schema:
            type: string
        - name: type
          in: query
          description: The type of license.
          schema:
            type: string
            default: all
            enum:
              - all
              - active
              - expired
        - $ref: '#/components/schemas/Migration/properties/source'
        - name: is_enriched
          in: query
          description: Returns the license's product type.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: License collection.
          content:
            application/json:
              schema:
                properties:
                  licenses:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/License'
                        - properties:
                            plugin_type:
                              description: The product type of the license.
                              type: string
                            products:
                              description: >-
                                List of IDs of children products in case the
                                product is a bundle.
                              type: array
                              items:
                                $ref: >-
                                  #/components/schemas/CommonProperties/properties/id
                          type: object
                type: object
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/user_id'
  '/products/{product_id}/users/{user_id}/payments.json':
    get:
      tags:
        - User
      summary: List payments
      description: List all payments of the user.
      operationId: efbd2dac554d3bf2608d4115d6bc1119
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/count'
        - name: extended
          in: query
          description: 'If `true`, loads linked user, plan and subscription.'
          required: false
          schema:
            type: boolean
            default: 'false'
        - name: include_addons
          in: query
          description: Returns the plugin add-ons' payments as well.
          schema:
            type: boolean
            default: 'false'
        - name: include_bundles
          in: query
          description: Returns the plugin bundles' payments as well.
          schema:
            type: boolean
            default: 'false'
        - name: filter
          in: query
          description: Filter the payments by the status.
          schema:
            type: string
            default: all
            enum:
              - all
              - refunds
              - not_refunded
              - not_refunded_renewals
        - $ref: '#/components/parameters/billing_cycle'
      responses:
        '200':
          description: Payment collection.
          content:
            application/json:
              schema:
                properties:
                  payments:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Payment'
                        - properties:
                            currency:
                              description: >-
                                3-char currency code. (Only available when
                                `extended` is set to `true`.)
                              type: string
                              maxLength: 3
                              minLength: 3
                              enum:
                                - usd
                                - eur
                                - gbp
                              nullable: false
                            plan_name:
                              description: >-
                                Name of the plan associated with the
                                subscription. (Only available when `extended` is
                                set to `true`.)
                              type: string
                              example: Professional
                              nullable: true
                            email:
                              description: >-
                                Email of the user associated with the
                                subscription. (Only available when `extended` is
                                set to `true`.)
                              type: string
                              example: foo@freemius.com
                              nullable: true
                            url:
                              description: >-
                                URL of the installation associated with the
                                subscription. (Only available when `extended` is
                                set to `true`.)
                              type: string
                              example: 'https://example.com'
                              nullable: true
                            billing_cycle:
                              description: >-
                                The billing cycle of the subscription in number
                                of months. 1 means monthly, 12 means annually, 0
                                means lifetime usually when subscriptions are
                                created for lifetime trials. (Only available
                                when `extended` is set to `true`.)
                              type: number
                              enum:
                                - 1
                                - 12
                                - 0
                          type: object
                  discounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Discount'
                type: object
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/user_id'
  '/products/{product_id}/users/{user_id}/subscriptions.json':
    get:
      tags:
        - User
      summary: List subscriptions
      description: List all subscriptions of the user.
      operationId: 02dcd33b9694faae9b63c2b60952ed9b
      parameters:
        - name: extended
          in: query
          description: >-
            Enrich the subscriptions with the plan name, install URL & title,
            and user email.
          required: false
          schema:
            type: boolean
            default: 'false'
        - name: filter
          in: query
          description: Filter the subscriptions by the status.
          schema:
            type: string
            default: all
            enum:
              - all
              - active
              - cancelled
        - name: billing_cycle
          in: query
          description: Filter by billing cycle.
          required: false
          schema:
            type: string
            enum:
              - 1
              - 12
        - $ref: '#/components/parameters/gateway'
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/count'
        - name: plan_id
          in: query
          description: Filter the subscriptions by the plan ID.
          schema:
            type: string
        - name: store_id
          in: query
          description: The store ID.
          required: false
          schema:
            type: number
        - name: sort
          in: query
          description: Sort the subscriptions by the ID or the next payment date.
          schema:
            type: string
            default: id
            enum:
              - id
              - next_payment
        - name: search
          in: query
          description: 'Search by subscription ID, external subscription ID or user email.'
          schema:
            type: string
      responses:
        '200':
          description: Subscription collection.
          content:
            application/json:
              schema:
                properties:
                  subscriptions:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Subscription'
                        - properties:
                            plan_name:
                              description: >-
                                Name of the plan associated with the
                                subscription. (Only available when `extended` is
                                set to `true`.)
                              type: string
                              example: Professional
                              nullable: true
                            email:
                              description: >-
                                Email of the user associated with the
                                subscription. (Only available when `extended` is
                                set to `true`.)
                              type: string
                              example: foo@freemius.com
                              nullable: true
                            url:
                              description: >-
                                URL of the installation associated with the
                                subscription. (Only available when `extended` is
                                set to `true`.)
                              type: string
                              example: 'https://example.com'
                              nullable: true
                            title:
                              description: >-
                                Title of the installation associated with the
                                subscription. (Only available when `extended` is
                                set to `true`.)
                              type: string
                              example: Website title
                              nullable: true
                          type: object
                  discounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Discount'
                type: object
        '401':
          $ref: '#/components/responses/401'
        '402':
          $ref: '#/components/responses/402'
        '404':
          $ref: '#/components/responses/404'
    parameters:
      - $ref: '#/components/parameters/product_id'
      - $ref: '#/components/parameters/user_id'
components:
  schemas:
    ApiError:
      properties:
        path:
          description: The API request path.
          type: string
          example: ':/products/product_id/users.json'
        error:
          description: This object contains the error details.
          properties:
            type:
              description: The type of the error encountered by the server.
              type: string
              example: UnauthorizedAccess
            message:
              description: The descriptive error message.
              type: string
              example: Some error has occured.
            code:
              description: The error code.
              type: string
              example: unauthorized_access
            http:
              description: The HTTP status code returned by the server.
              type: integer
              example: 401
            timestamp:
              description: Current timestamp.
              type: string
              example: 'Thu, 11 May 2023 11:45:30 +0000'
          type: object
        request:
          description: >-
            This object sends back the request payload as received by the server
            (both from path and from body or query).
          type: object
          example:
            beautify: true
            format: json
          additionalProperties: true
      type: object
      x-internal: true
    CommonEnums:
      description: Some enums that are common to many entities.
      properties:
        ProductType:
          type: string
          enum:
            - plugin
            - theme
            - widget
            - template
        RefundPolicy:
          type: string
          enum:
            - flexible
            - moderate
            - strict
        RenewalsDiscountType:
          description: 'The type of renewals discount, percentage or dollar.'
          type: string
          enum:
            - percentage
            - dollar
        AuthenticationType:
          description: >-
            The type of authentication. If `app2fa` is set, the person has
            signed for 2FA authentication.
          type: string
          enum:
            - app2fa
            - password
        EmailStatus:
          description: The status of the last email sent to the user.
          type: string
          enum:
            - delivered
            - bounce
            - dropped
        BillingCycle:
          description: >-
            The billing cycle of the subscription in number of months. 1 means
            monthly, 12 means annually, 0 means lifetime usually when
            subscriptions are created for lifetime trials.
          type: number
          enum:
            - 1
            - 12
            - 0
        PersonType:
          description: >-
            The type of the person. A developer is a person who sells software
            through the Freemius platform, a user is a person who buys software
            through the Freemius platform.
          type: string
          enum:
            - developer
            - user
        DiscountType:
          description: >-
            The type of the discount. "percentage" means the discount is a
            percentage of the price, "dollar" means the discount is a fixed
            amount.
          type: string
          enum:
            - dollar
            - percentage
        PaymentMethodType:
          description: The payment method selected for the purchase.
          type: string
          default: cc
          enum:
            - cc
            - paypal
        Currency:
          description: 3-char currency code.
          type: string
          maxLength: 3
          minLength: 3
          enum:
            - usd
            - eur
            - gbp
          nullable: false
        PaymentType:
          description: The type of the payment.
          type: string
          default: payment
          enum:
            - payment
            - refund
            - disputed
            - won_dispute
            - lost_dispute
            - chargeback
          nullable: false
        BusinessModel:
          description: The product sales model.
          type: string
          enum:
            - free
            - freemium
            - premium
          example:
            - freemium
      type: object
      x-internal: true
    CommonProperties:
      description: >-
        This schema lists the common properties shared by various other schemas
        or entities.
      properties:
        id:
          description: The unique identifier of the entity.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: false
        created:
          description: 'The date and time the entity was created, under UTC timezone.'
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
          nullable: false
        updated:
          description: >-
            The date and time the entity was updated, under UTC timezone. If
            `null` then the entity was never updated since its creation.
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
          nullable: true
        icon:
          description: >-
            The icon of the entity, must be a valid JPG, PNG or GIF image, with
            dimension not exceeding 300px by 300px. Max allowed size is 200KB
          type: string
          format: binary
        plugin_id:
          description: The ID of the product the entity belongs to.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: false
        plugin_id_nullable:
          description: >-
            The ID of the product the entity belongs to. Null means it has not
            been associated with a product yet.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: true
        environment:
          description: >-
            The environment the entity belongs to. 0 means it belongs to the
            production environment, 1 means it belongs to the sandbox
            environment.
          type: number
          enum:
            - 1
            - 0
          example: 0
          nullable: false
        user_id:
          description: The ID of the user the entity belongs to.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: false
        install_id:
          description: The ID of the installation or site the entity is associated with.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: false
        install_id_nullable:
          description: >-
            The ID of the installation or site the entity is associated with, a
            `null` value means it has not been associated with an installation
            yet.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: true
        plan_id:
          description: The ID of the plan associated with the entity.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: false
        subscription_id:
          description: The ID of the subscription associated with the entity.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: false
        subscription_id_nullable:
          description: The ID of the subscription associated with the entity.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: true
        payment_id_nullable:
          description: The ID of the payment associated to the entity.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: true
        plan_id_nullable:
          description: The ID of the plan associated with the entity.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: true
        pricing_id:
          description: The ID of the pricing associated with the entity.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: false
        pricing_id_nullable:
          description: The ID of the pricing associated with the entity.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: true
        license_id:
          description: The ID of the license associated with the entity.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: false
        license_id_nullable:
          description: The ID of the license associated with the entity.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: true
        coupon_id:
          description: The ID of the coupon associated with the entity.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: false
        coupon_id_nullable:
          description: The ID of the coupon associated with the entity.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: true
        coupon_code:
          description: Coupon code associated with the cart.
          type: string
          example: BLACKFRIDAY2024
          nullable: true
        ip_nullable:
          description: The IP address associated with the entity.
          type: string
          format: ipv4|ipv6
          example: 0.0.0.0
          nullable: true
        ip:
          description: The IP address associated with the entity.
          type: string
          format: ipv4|ipv6
          example: 0.0.0.0
          nullable: false
        country_code_nullable:
          description: >-
            The [ISO 3166-1 alpha
            2](http://www.wikiwand.com/en/ISO_3166-1_alpha-2) two-letter country
            code associated with the entity.
          type: string
          example: us
          nullable: true
        country_code:
          description: >-
            The [ISO 3166-1 alpha
            2](http://www.wikiwand.com/en/ISO_3166-1_alpha-2) two-letter country
            code associated with the entity.
          type: string
          example: us
          nullable: false
        zip_postal_code:
          description: The postal/zip code of the location.
          type: string
          example: '92710'
          nullable: false
        zip_postal_code_nullable:
          description: The postal/zip code of the location.
          type: string
          example: '92710'
          nullable: true
        vat_id_nullable:
          description: >-
            The business VAT number (EU or UK territories) or other tax ID (for
            example Sales Tax ID for the US).
          type: string
          example: GB12345678
          nullable: true
        vat:
          description: >-
            The actual tax amount. It could be any kind of tax, not necessarily
            VAT. For example we support US Sales Tax.
          type: number
          default: 0
          example: 1.24
          nullable: false
        uid:
          description: >-
            Unique identifier of the caller. The UID must be same when pinging
            and when activating or deactivating a license. The generation of the
            UID is a responsibility of the client.
          type: string
          format: uid
          maxLength: 32
          minLength: 32
          example: 7W131pej6bJYV8WYM9KgGoBNB9bCiSrY
        user_id_nullable:
          description: >-
            The ID of the user the entity belongs to. If NULL then still not
            associated to any user.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: true
      type: object
      x-internal: true
    CommonRequestSchemas:
      description: Some request body schemas that are common to many endpoints.
      properties:
        MultipartJsonData:
          description: >-
            The JSON data of the endpoint, matching the same schema as the json
            request body. Must be a valid JSON object.
          type: string
          format: json
          example: '{"name":"My Product"}'
      type: object
      x-internal: true
    Migration:
      description: >-
        Resource explaining different relational data for migrated entities. For
        example if you'd want to migrate your product from EDD to Freemius, then
        your existing subscriptions, payments, licenses etc would have a
        specific value in their `source` property. To get support migrating from
        other platform please see our
        [documentation](https://freemius.com/help/documentation/migration/).
      properties:
        source_external_id:
          description: >-
            The source of the migration data. To get support migrating from
            other platform please see our
            [documentation](https://freemius.com/help/documentation/migration/).
          type: string
          enum:
            - freemius
            - edd
            - easydigitaldownloads
            - woo
            - wc
            - woocommerce
            - gumroad
            - cc
            - codecanyon
            - tf
            - themeforest
            - appsumo
            - sendowl
            - whmcs
            - ls
            - lemonsqueezy
        source:
          description: >-
            The source of the migration data. To get support migrating from
            other platform please see our
            [documentation](https://freemius.com/help/documentation/migration/).
          type: number
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
            - 10
            - 11
      type: object
      x-internal: true
    BankAccount:
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        person_id:
          description: ID of the person.
          type: number
        person_type:
          $ref: '#/components/schemas/CommonEnums/properties/PersonType'
        account_last4:
          description: Last 4 digits of the account number.
          type: string
        name:
          description: Name of the account holder.
          type: string
        phone:
          description: Phone number of the account holder.
          type: string
        address_street:
          description: Address line one of the account holder.
          type: string
        address_apt:
          description: Address line two of the account holder.
          type: string
          nullable: true
        address_city:
          description: City of the account holder.
          type: string
        address_state:
          description: State of the account holder.
          type: string
          nullable: true
        address_zip:
          description: ZIP or postal code of the account holder.
          type: string
        address_country_code:
          $ref: '#/components/schemas/CommonProperties/properties/country_code'
        bank_name:
          description: Name of the bank.
          type: string
        bank_city_state:
          description: City and state of the bank.
          type: string
        bank_country_code:
          $ref: '#/components/schemas/CommonProperties/properties/country_code'
        swift:
          description: Swift code of the bank.
          type: string
        ifsc:
          description: IFSC number of Indian banks only.
          type: string
          nullable: true
        sort_code:
          description: 6 digits Sort code of UK banks only.
          type: string
          pattern: '^\d{6}$'
          nullable: true
        aba_rtn:
          description: 9 digits Routing number for US banks only.
          type: string
          pattern: '^\d{9}$'
          nullable: true
        wise_account_email:
          description: Email account for Wise banks only.
          type: string
          nullable: true
      type: object
      x-internal: true
    BetaParticipation:
      description: >-
        A Beta participation represents a choice by the user to utilize the beta
        version of the product.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        user_id:
          $ref: '#/components/schemas/CommonProperties/properties/user_id'
        plugin_id:
          $ref: '#/components/schemas/CommonProperties/properties/plugin_id_nullable'
        install_id:
          $ref: '#/components/schemas/CommonProperties/properties/install_id_nullable'
        is_beta:
          description: Whether the product user is participating in the beta program.
          type: boolean
      type: object
      x-internal: true
    Billing:
      description: >-
        Representation of billing details associated with a person or a
        business.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        business_name:
          description: The name of the business.
          type: string
          example: 'Freemius, Inc.'
        first:
          description: The first name used in the billing.
          type: string
          example: John
        last:
          description: The last name used in the billing.
          type: string
          example: Doe
        email:
          description: The email used in the billing.
          type: string
          example: foo@freemius.com
        phone:
          description: The phone number used in the billing.
          type: string
          example: 555-555-5555
        website:
          description: The website used in the billing.
          type: string
          example: 'https://freemius.com'
        tax_id:
          description: >-
            The business VAT number (EU or UK territories) or other tax ID (for
            example Sales Tax ID for the US).
          type: string
          example: GB123456789
        address_street:
          description: The street address used in the billing.
          type: string
          example: 21st Jump Street
        address_apt:
          description: The street address 2 used in the billing.
          type: string
          example: Block II
        address_city:
          description: The city used in the billing.
          type: string
          example: Atlanta
        address_country:
          description: The country used in the billing.
          type: string
          example: United States
        address_country_code:
          $ref: '#/components/schemas/CommonProperties/properties/country_code'
        address_state:
          description: The state of the location.
          type: string
          example: New York
        address_zip:
          description: ZIP or postal code.
          type: string
          example: '00001'
      type: object
    Cart:
      description: >-
        A cart represents a buyer's intent to purchase a product. The state of
        the cart is based on the action performed by the buyer. You can read our
        [documentation](https://freemius.com/help/documentation/marketing-automation/cart-abandonment-recovery/)
        to learn more about it.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        status:
          description: The status of the cart.
          type: string
          default: visit
          enum:
            - pricing_visit
            - visit
            - abandoned
            - completed
            - email_1_sent
            - email_2_sent
            - email_3_sent
            - recovered
        mode:
          description: >-
            The mode the checkout app was opened in, when the cart was created.
            For example


            - `dashboard`: The checkout was opened through our [WordPress
            SDK](https://freemius.com/help/documentation/wordpress-sdk/).

            - `dialog`: The checkout was opened through our [JavaScript
            SDK](https://freemius.com/help/documentation/selling-with-freemius/freemius-checkout-buy-button/).

            - `page`: The checkout was opened directly.
          type: string
          default: dialog
          enum:
            - dashboard
            - dialog
            - page
        payment_method:
          $ref: '#/components/schemas/CommonEnums/properties/PaymentMethodType'
        plugin_id:
          $ref: '#/components/schemas/CommonProperties/properties/plugin_id'
        plan_id:
          $ref: '#/components/schemas/CommonProperties/properties/plan_id_nullable'
        pricing_id:
          $ref: '#/components/schemas/CommonProperties/properties/pricing_id_nullable'
        is_trial:
          description: Whether the plan is a trial.
          type: boolean
        billing_cycle:
          $ref: '#/components/schemas/CommonEnums/properties/BillingCycle'
        install_id:
          $ref: '#/components/schemas/CommonProperties/properties/install_id_nullable'
        coupon_id:
          $ref: '#/components/schemas/CommonProperties/properties/coupon_id_nullable'
        country_code:
          $ref: >-
            #/components/schemas/CommonProperties/properties/country_code_nullable
        zip_postal_code:
          $ref: '#/components/schemas/CommonProperties/properties/zip_postal_code'
        vat_id:
          $ref: '#/components/schemas/CommonProperties/properties/vat_id_nullable'
        user_id:
          $ref: '#/components/schemas/CommonProperties/properties/user_id_nullable'
        email:
          description: The prospect's email address.
          type: string
          example: doe@example.com
        first:
          description: The prospect's first name.
          type: string
          example: John
        last:
          description: The prospect's last name.
          type: string
          example: Doe
        ip:
          $ref: '#/components/schemas/CommonProperties/properties/ip'
        url:
          description: The page URL containing the checkout.
          type: string
          example: 'https://example.com/pricing'
        environment:
          $ref: '#/components/schemas/CommonProperties/properties/environment'
        is_disabled:
          description: >-
            Cart supports [recovery
            campaign](https://freemius.com/help/documentation/marketing-automation/cart-abandonment-recovery/).
            If disabled, the recovery campaign will be stopped.
          type: boolean
          default: 'false'
        is_unsubscribed:
          description: >-
            If set to `true`, the cart recovery campaign will be non-functional
            and cannot be re-enabled. This happens if the prospect has clicked
            the "unsubscribe" link from any of the cart recovery emails.
          type: boolean
          default: 'false'
        visited:
          description: >-
            The first time the prospect visited the checkout when the cart was
            being created.
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
          nullable: true
        completed:
          description: The cart completion date.
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
          nullable: true
        price:
          description: The cart's original price.
          type: number
          format: float
          example: '19.99'
      type: object
    Coupon:
      description: A coupon can be used during the checkout to apply some discounts.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        entity_id:
          description: The ID of the entity the coupon belongs to.
          type: integer
        entity_type:
          description: The type of the entity the coupon belongs to.
          type: string
          enum:
            - plugin
            - store
            - marketplace
          example: plugin
        plans:
          description: >-
            Comma separated IDs of plans the coupon would work for. If `null`,
            coupon supports all plans.
          type: string
          example: '123,654,8757'
          nullable: true
        licenses:
          description: >-
            Comma separated licenses quota limits. If `null`, coupon supports
            all license limits. `0` is used for an unlimited-site license.
          type: string
          example: '1,5,10,0'
          nullable: true
        billing_cycles:
          description: >-
            Comma separated billing cycles. If `null`, coupon supports all
            billing cycles. `0` is used for lifetime billing cycle.
          type: string
          example: '1,12'
          nullable: true
        code:
          description: The coupon code.
          type: string
          example: BLACKFRIDAY2024
        discount:
          description: The discount amount.
          type: integer
        discount_type:
          $ref: '#/components/schemas/CommonEnums/properties/DiscountType'
        start_date:
          description: Date and time from when the coupon will be activated.
          type: string
          format: date-time
          example: '2025-04-01 11:13:28'
        end_date:
          description: 'Date and time, after which the coupon will be expired.'
          type: string
          format: date-time
          example: '2025-04-30 19:17:21'
        redemptions:
          description: The total number of redemptions of this coupon.
          type: integer
        redemptions_limit:
          description: The total number of redemptions limit of this coupon.
          type: integer
          nullable: true
        has_renewals_discount:
          description: >-
            Whether the coupon also supports discount for renewals or first
            payment only.
          type: boolean
        has_addons_discount:
          description: Whether the coupon supports discount for add-ons or not.
          type: boolean
        is_one_per_user:
          description: Whether to limit the coupon usage one per user.
          type: boolean
        is_active:
          description: >-
            Whether the coupon is active. Use this flag to temporarily disable
            the coupon.
          type: boolean
        user_type:
          description: The user type the coupon is applicable to.
          type: string
          enum:
            - all
            - new
            - current
            - previous
            - customer
            - migrated
        source:
          $ref: '#/components/schemas/Migration/properties/source'
      type: object
    Customer:
      description: >-
        Class Customer


        An entity to store the connection between a user to its gateway's
        customer ID.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        user_id:
          $ref: '#/components/schemas/CommonProperties/properties/user_id'
        external_id:
          description: The external ID from the gateway.
          type: string
        gateway:
          description: The gateway used for the purchase.
          type: string
          enum:
            - paypal
            - stripe
            - stripe_eu
            - test
      type: object
      x-internal: true
    Developer:
      description: >-
        A developer is someone who has registered to sell products on the
        Freemius platform.
      properties:
        email:
          description: Email address of the person.
          type: string
          example: jane@example.com
        first:
          description: First name of the person.
          type: string
          example: Jane
        last:
          description: Last name of the person.
          type: string
          example: Doe
        picture:
          description: Profile picture URL.
          type: string
          example: 'https://example.com/profile-pic.jpg'
        ip:
          description: The IP address (v4 or v6).
          type: string
          format: ipv4|ipv6
          example: 127.0.0.1
          nullable: true
        is_verified:
          description: Whether the person is trusted or not.
          type: boolean
          example: 'true'
        auth:
          $ref: '#/components/schemas/CommonEnums/properties/AuthenticationType'
        secret_key:
          description: The secret key associated with the entity for authorization.
          type: string
          example: sk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
        public_key:
          description: The public key associated with the entity for authorization.
          type: string
          example: pk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        paypal_email:
          description: >-
            The legacy PayPal email of the developer. Please use the new billing
            instead.
          type: string
          example: payout@example.com
          deprecated: true
        security_email:
          description: >-
            Additional address of the developer where Freemius will send
            security related emails.
          type: string
          example: security@example.com
        is_trusted:
          type: boolean
        earnings:
          description: >-
            Developer's paid out gross revenue (excluding chargeback fees,
            payout fees, and refund fees).
          type: number
          format: float
          example: '1000.00'
        last_cycle_earnings:
          description: >-
            Developer's unpaid gross revenue. Necessary for properly calculating
            the commission.
          type: number
          format: float
          example: '100.00'
        commission:
          description: >-
            Commission structure. The structure `{1000: 0.3, 5000: 0.2, above:
            0.1}`, means

            that there's 30% commission on up to $1,000 rev, 20% on the revenues
            from $1,001-$5,000 and 10% after $5,001.
          type: string
          format: json
          example: '{"above":0.1}'
      type: object
    Discount:
      description: >-
        Discount entity holding the relation between a gateway entity and a
        coupon.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        entity_id:
          description: The ID of the related entity.
          type: string
          format: int64
          minimum: 1
        entity_type:
          description: The type of the related entity. Defaults to `payment`.
          type: string
          default: payment
          enum:
            - payment
            - subscription
        type:
          description: >-
            The type of discount. Possible values are `prorate` and
            `subscription_cancellation`. Defaults to `prorate`.
          type: string
          default: prorate
          enum:
            - prorate
            - subscription_cancellation
        discount:
          description: Discount amount in USD.
          type: number
          format: float
          example: '10.0'
        coupon_id:
          description: The ID of the related coupon.
          type: string
          format: int64
          minimum: 1
      type: object
    EventLog:
      description: A record of an event logged in the system.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        type:
          description: >-
            The type of event. See our documented list of the available [event
            types](https://freemius.com/help/documentation/marketing-automation/events-webhooks/#event_types).
          type: string
          example: license.activated
        developer_id:
          description: The ID of the developer.
          type: string
          format: int64
          minimum: 1
          example: '1234'
        plugin_id:
          $ref: '#/components/schemas/CommonProperties/properties/plugin_id_nullable'
        user_id:
          $ref: '#/components/schemas/CommonProperties/properties/user_id_nullable'
        install_id:
          $ref: '#/components/schemas/CommonProperties/properties/install_id_nullable'
        data:
          description: >-
            The details of the triggered event. This can be a `string` showing
            ID of the associated entity, an `object` with additional information
            of the event, or array of objects.
          nullable: true
        event_trigger:
          description: The type of trigger for the event.
          type: string
          enum:
            - system
            - developer
            - plugin
            - user
            - install
          example: system
        process_time:
          description: >-
            The time the event was processed. If it is `null`, the event is
            pending.
          type: string
          format: date-time
          example: '2025-01-01 12:00:00'
          nullable: true
      type: object
    Install:
      description: >-
        Represents an installation of a product on a site. For WordPress
        products (themes, plugins) it can or cannot have a license. For SaaS or
        downloadable software, it would always have a license. Please see
        license activation for more information.
      properties:
        secret_key:
          description: The secret key associated with the entity for authorization.
          type: string
          example: sk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
        public_key:
          description: The public key associated with the entity for authorization.
          type: string
          example: pk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        site_id:
          description: The ID of the site.
          type: string
          format: int64
          example: 1234
        plugin_id:
          $ref: '#/components/schemas/CommonProperties/properties/plugin_id'
        user_id:
          $ref: '#/components/schemas/CommonProperties/properties/user_id'
        url:
          description: The site URL.
          type: string
          example: 'https://example.com'
          nullable: true
        title:
          description: The site title.
          type: string
          example: Catwalk Designs
          nullable: true
        version:
          description: The Product version.
          type: string
          example: 1.0.0
        plan_id:
          description: >-
            The ID of the plan associated with the product that the install has
            a license activation. If `null` it means the install is using the
            free plan.
          type: string
          format: int64
          minimum: 1
          example: '1234'
        license_id:
          $ref: '#/components/schemas/CommonProperties/properties/license_id_nullable'
        trial_plan_id:
          description: >-
            The ID of the trial license associated to the product. If this is
            not a trial, this will be `null`.
          type: string
          format: int64
          minimum: 1
          example: '1234'
        trial_ends:
          description: >-
            The product trial license expiry date. If this is not a trial, this
            will be null.
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
          nullable: true
        subscription_id:
          $ref: >-
            #/components/schemas/CommonProperties/properties/subscription_id_nullable
        gross:
          description: >-
            The gross amount the install has spent on the product. This includes
            one time purchase, or subscriptions and renewals.
          type: number
          format: float
          example: 100
        country_code:
          $ref: >-
            #/components/schemas/CommonProperties/properties/country_code_nullable
        language:
          description: The language specified for the product install.
          type: string
          example: en-GB
          nullable: true
        platform_version:
          description: The platform version (e.g WordPress version).
          type: string
          example: 1.0.0
          nullable: true
        sdk_version:
          description: >-
            The Freemius SDK version. Only relevant for WordPress products using
            the Freemius [WP
            SDK](https://freemius.com/help/documentation/wordpress-sdk/).
          type: string
          example: 1.2.2
          nullable: true
        programming_language_version:
          description: The programming language version (e.g PHP version).
          type: string
          example: '5.6'
          nullable: true
        is_active:
          description: If the product is actively installed on the site.
          type: boolean
        is_disconnected:
          description: If the product is disconnected on the site.
          type: boolean
        is_premium:
          description: >-
            If the install using the premium code. Relevant only for WP
            Products.
          type: boolean
        is_uninstalled:
          description: If the product is uninstalled on the site.
          type: boolean
        is_locked:
          description: If the product is locked on the site.
          type: boolean
        source:
          $ref: '#/components/schemas/Migration/properties/source'
        upgraded:
          description: >-
            Time when the product was upgraded to the current version. If never
            upgraded since the initial installation, this will be `null`.
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
          nullable: true
        last_seen_at:
          description: The last time the product was used on the site.
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
          nullable: true
        last_served_update_version:
          description: >-
            The last product version update used on the site. If not updated,
            this will be null.
          type: string
          example: 1.2.2
          nullable: true
      type: object
    InstallClone:
      description: >-
        Represents the relation between an install and its clone. These entities
        are usually created when a user clones the site in staging or locally.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        install_id:
          $ref: '#/components/schemas/CommonProperties/properties/install_id'
        new_install_id:
          description: The ID of the newly created cloned `Install`.
          type: string
          format: int64
          minimum: 1
          example: '1234'
          nullable: true
        install_url:
          description: The install's URL (install.url) when the clone was identified.
          type: string
          example: 'https://example.com'
        site_url:
          description: The URL of the site where the clone was identified.
          type: string
          example: 'https://staging.example.com'
        state:
          description: The state of the clone.
          type: string
          enum:
            - pending
            - resolved
        resolution:
          description: The resolution or purpose of the clone site.
          type: string
          enum:
            - temporary_duplicate
            - new_home
            - long_term_duplicate
          nullable: true
      type: object
    InstallMetadata:
      properties:
        permissions:
          properties:
            site:
              description: >-
                Whether the site level tracking is on, for example the site
                title, URL, language etc.
              type: boolean
            user:
              description: >-
                Whether the user level tracking is on, for example the user
                email, first and last name, etc.
              type: boolean
            extensions:
              description: >-
                Whether the extensions tracking is on (for example list of
                plugins and themes installed on the same WordPress website).
              type: boolean
          type: object
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        install_id:
          $ref: '#/components/schemas/CommonProperties/properties/install_id'
      type: object
      x-internal: true
    License:
      description: >-
        A license represents authorization to use available features of the
        product.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        plugin_id:
          $ref: '#/components/schemas/CommonProperties/properties/plugin_id'
        user_id:
          $ref: '#/components/schemas/CommonProperties/properties/user_id_nullable'
        plan_id:
          $ref: '#/components/schemas/CommonProperties/properties/plan_id'
        pricing_id:
          $ref: '#/components/schemas/CommonProperties/properties/pricing_id_nullable'
        quota:
          description: >-
            The maximum number of license activations. If `null` then the
            license will support unlimited activations.
          type: integer
          example: 10
          nullable: true
        activated:
          description: >-
            The total number of production activation the license has. This does
            not count local or staging environment activations.
          type: integer
          example: 1
        activated_local:
          description: >-
            The number of times the license is activated on local or staging
            environments.
          type: integer
          example: 1
          nullable: true
        expiration:
          description: >-
            The expiration date of the license. If `null` then it's a lifetime
            license.
          type: string
          format: date-time
          example: '2025-12-31 23:59:59'
          nullable: true
        secret_key:
          description: >-
            The license key. This is used for activating the license on the
            user's site.
          type: string
          example: sk_123FGqM456Pa786WtOp%^+67Y+;sXXz
        is_free_localhost:
          description: >-
            Whether the license offers unlimited local or staging environment
            activations.
          type: boolean
          default: true
        is_block_features:
          description: >-
            Whether to block features after expiration of the license. If set to
            `false`, this would not block features, would only block updates.
          type: boolean
          default: true
        is_cancelled:
          description: If the license is canceled from the Developer Dashboard.
          type: boolean
        is_whitelabeled:
          description: >-
            Guide the [Freemius WP
            SDK](https://github.com/Freemius/wordpress-sdk) when the product
            should be running in a
            [white-label](https://freemius.com/help/documentation/users-account-management/license-security/#white_label_mode)
            mode.
          type: boolean
        environment:
          $ref: '#/components/schemas/CommonProperties/properties/environment'
        source:
          $ref: '#/components/schemas/Migration/properties/source'
      type: object
    LicenseEnriched:
      description: A license associated with a subscription or a bundle.
      type: object
      allOf:
        - $ref: '#/components/schemas/License'
        - properties:
            parent_plan_id:
              description: >-
                The ID of the associated bundle license. (Available only when
                `enriched` option is set)
              type: number
            trial_ends:
              description: >-
                The end date of a trial subscription. (Available only when
                `enriched` option is set)
              type: string
              format: date-time
              example: '2021-01-01 00:00:00'
            subscription_id:
              description: >-
                The ID of the associated subscription. (Available only when
                `enriched` option is set)
              type: string
              format: int64
              minimum: 1
              example: '1234'
            subscription_total_gross:
              description: >-
                The total gross price associated with the subscription.
                (Available only when `enriched` option is set)
              type: number
              format: float
              example: '102.34'
            subscription_initial_amount:
              description: >-
                The initial amount associated with the subscription. (Available
                only when `enriched` option is set)
              type: number
              format: float
              example: '105.99'
            subscription_gateway:
              description: >-
                The payment gateway associated with the subscription. (Available
                only when `enriched` option is set)
              type: string
              enum:
                - paypal
                - stripe
                - test
              example: stripe
            subscription_failed_payments:
              description: >-
                The number of failed payments associated with the subscription.
                (Available only when `enriched` option is set)
              type: integer
              example: 2
            next_payment:
              description: >-
                The renewal date of the subscription. (Available only when
                `enriched` option is set)
              type: string
              format: date-time
              example: '2025-01-01 00:00:00'
              nullable: true
            parent_license_id:
              description: >-
                The ID of the associated bundle license. This will be populated
                only when the license is associated with a parent license from a
                bundle. (Available only when `enriched` option is set)
              type: string
              format: int64
              minimum: 0
              example: '1234'
            parent_license_bundle_id:
              description: >-
                The ID of the bundle that is associated with the parent license.
                (Available only when `enriched` option is set)
              type: string
              format: int64
              minimum: 0
              example: '1234'
            parent_plan_title:
              description: >-
                The title of the plan associated with the bundle. (Available
                only when `enriched` option is set)
              type: string
              example: Agency
              nullable: true
            parent_plan_name:
              description: >-
                The slug of the plan associated with the bundle. (Available only
                when `enriched` option is set)
              type: string
              example: agency
              nullable: true
          type: object
      x-internal: true
    MarketItem:
      description: >-
        Represents a product from the market, not necessarily powered by
        Freemius. For WordPress product this usually represents a themes or
        plugins installed in the same site as the Freemius powered product. Only
        after the user chooses to opt-in, such data is collected and sent to
        Freemius.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        plugin_id:
          $ref: '#/components/schemas/CommonProperties/properties/plugin_id_nullable'
        slug:
          description: Product slug name.
          type: string
          example: catwalk-reviews
        title:
          description: Products name.
          type: string
          example: Catwalk Reviews
        model:
          description: >-
            The business model of the product. We can only detect the model if
            the product is also integrated with Freemius.
          type: string
          default: free
          enum:
            - free
            - premium
            - freemium
        type:
          description: >-
            The type of the product. Right now we only support WordPress
            products, i.e, plugins and themes.
          type: string
          default: plugin
          enum:
            - plugin
            - theme
        downloads:
          description: >-
            The number of product downloads.


            > We are not updating this field yet. We plan to do it in the
            future.
          type: integer
          example: 1000
        installs_count:
          description: >-
            The number of product installs.


            > We are not updating this field yet. We plan to do it in the
            future.
          type: integer
          example: 1000
        last_release:
          description: >-
            The date of the last product release/update.


            > We are not updating this field yet. We plan to do it in the
            future.
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
        newest_version:
          description: The version number of the latest release/update.
          type: string
          example: 1.0.0
      type: object
    Payment:
      description: "An acknowledgement of a payment recevied for the following cases:\r\n- Initial payment of a subscription.\r\n- Renewal payment of a subscription.\r\n- One-time payment for a product.\r\n\r\nAlong with refunds, disputes, chargebacks etc."
      properties:
        user_id:
          $ref: '#/components/schemas/CommonProperties/properties/user_id'
        install_id:
          $ref: '#/components/schemas/CommonProperties/properties/install_id_nullable'
        plan_id:
          $ref: '#/components/schemas/CommonProperties/properties/plan_id'
        pricing_id:
          $ref: '#/components/schemas/CommonProperties/properties/pricing_id_nullable'
        license_id:
          $ref: '#/components/schemas/CommonProperties/properties/license_id'
        ip:
          $ref: '#/components/schemas/CommonProperties/properties/ip_nullable'
        country_code:
          $ref: '#/components/schemas/CommonProperties/properties/country_code'
        zip_postal_code:
          $ref: >-
            #/components/schemas/CommonProperties/properties/zip_postal_code_nullable
        vat_id:
          $ref: '#/components/schemas/CommonProperties/properties/vat_id_nullable'
        coupon_id:
          $ref: '#/components/schemas/CommonProperties/properties/coupon_id_nullable'
        user_card_id:
          description: The ID of the user card that was used for this payment.
          type: string
          format: int64
          example: '12345'
        source:
          $ref: '#/components/schemas/Migration/properties/source'
        plugin_id:
          $ref: '#/components/schemas/CommonProperties/properties/plugin_id'
        external_id:
          description: The external ID of the gateway entity.
          type: string
        gateway:
          description: >-
            The gateway used for the purchase. The gateway will be set to `null`
            when purchasing a product with a 100% discount.
          type: string
          nullable: true
        environment:
          $ref: '#/components/schemas/CommonProperties/properties/environment'
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        subscription_id:
          $ref: >-
            #/components/schemas/CommonProperties/properties/subscription_id_nullable
        gross:
          description: The payment amount (not including taxes).
          type: number
          format: float
          example: 2075.45
        bound_payment_id:
          description: >-
            The ID of the payment that this payment is bound to, in case of a
            refund or chargeback/dispute.
          type: string
          format: int64
          minimum: 1
          example: '123456'
        gateway_fee:
          description: The fee that the gateway took for processing this payment.
          type: number
          format: float
          default: 0
          example: 2.99
        vat:
          $ref: '#/components/schemas/CommonProperties/properties/vat'
        is_renewal:
          description: If the payment is a renewal.
          type: boolean
          default: false
        type:
          $ref: '#/components/schemas/CommonEnums/properties/PaymentType'
      type: object
    Plan:
      description: >-
        A plan defines the features available to the users. It can have
        different set of pricing per billing cycle, quota, currency etc.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        plugin_id:
          $ref: '#/components/schemas/CommonProperties/properties/plugin_id'
        name:
          description: The name of the plan. Only lowercase characters allowed.
          type: string
          format: slug
          example: professional
        title:
          description: >-
            The title of the plan. This is the human readable name of the plan.
            Please do not add the suffix `Plan` to the title, as Freemius does
            that for you at various places.
          type: string
          example: Professional
        description:
          description: The description of the plan.
          type: string
          example: For small to medium businesses.
          nullable: true
        is_free_localhost:
          description: >-
            Whether the plan offers unlimited local or staging activations with
            the same license.
          type: boolean
          default: true
        is_block_features:
          description: >-
            Whether to block features on expiration of **annual** licenses. If
            `false`, does not block features but only block updates and support.
          type: boolean
          default: true
        is_block_features_monthly:
          description: >-
            Whether to block particular features on expiration of **monthly**
            licenses. If `false`, does not block features but only block updates
            and support.
          type: boolean
          default: true
        license_type:
          description: >-
            The type of the license. `0` for per domain license. `1` for per
            subdomain license.
          type: integer
          default: 0
          enum:
            - 0
            - 1
        trial_period:
          description: >-
            The number of days a trial period will last. If `null` the plan does
            not support trials.
          type: integer
          minimum: 1
          example: '14'
          nullable: true
        is_require_subscription:
          description: Whether to require a subscription payment for the trial period.
          type: boolean
        support_kb:
          description: The Knowledge Base URL.
          type: string
          nullable: true
        support_forum:
          description: The support Forum URL.
          type: string
          nullable: true
        support_email:
          description: The support email address.
          type: string
          nullable: true
        support_phone:
          description: The support phone contact.
          type: string
          nullable: true
        support_skype:
          description: The support Skype username.
          type: string
          nullable: true
        is_success_manager:
          description: Is a personal success manager allocated with the plan.
          type: boolean
        is_featured:
          description: Whether this is a featured plan.
          type: boolean
        is_hidden:
          description: >-
            Whether to hide the plan from the auto-generated pricing page.
            Mostly relevant for WordPress products and our WordPress SDK. Please
            see our [pricing-page](https://github.com/Freemius/pricing-page/)
            library to implement your own.
          type: boolean
      type: object
    Plugin:
      title: Product
      description: >-
        A **product** is a software that is being sold on Freemius. It can be a
        WordPress plugin, theme, SaaS, or any other software that is being sold
        on Freemius.
      properties:
        secret_key:
          description: The secret key associated with the entity for authorization.
          type: string
          example: sk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
        public_key:
          description: The public key associated with the entity for authorization.
          type: string
          example: pk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        parent_plugin_id:
          description: >-
            If the product is an add-on then this is the ID of the parent
            product.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: true
        developer_id:
          description: The ID of the developer that owns the product.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: false
        store_id:
          description: The ID of the store that the product is being sold on.
          type: string
          format: int64
          minimum: 1
          example: '123456'
          nullable: false
        slug:
          description: >-
            The `slug` of the product. If your plugin is listed on
            `WordPress.org` repository, use the exact slug.
          type: string
          example: my-freemius-plugin
        title:
          description: The title of the product.
          type: string
          example: My Freemius Plugin
        environment:
          $ref: '#/components/schemas/CommonProperties/properties/environment'
        icon:
          description: Product's icon (profile picture).
          type: string
          example: 'https://img.freemius.com/plugin-icon-blue.png'
          nullable: true
        default_plan_id:
          description: Default plan ID of the product.
          type: string
          format: int64
        plans:
          description: 'Comma separated, ordered plans collection.'
          type: string
          example: '123456,123457,123458'
        features:
          description: 'Comma separated, ordered features collection.'
          type: string
          example: '123456,123457,123458'
        money_back_period:
          description: Money-back guarantee in days.
          type: integer
        refund_policy:
          $ref: '#/components/schemas/CommonEnums/properties/RefundPolicy'
        annual_renewals_discount:
          description: Renewals discount that will be applied to the chosen plan.
          type: integer
          nullable: true
        renewals_discount_type:
          $ref: '#/components/schemas/CommonEnums/properties/RenewalsDiscountType'
        is_released:
          description: >-
            A flag that controls the visibility of add-ons in the in-dashboard
            add-ons marketplace. Defaults to true. Only applicable if the
            product is an add-on.
          type: boolean
        is_sdk_required:
          description: >-
            A flag that controls whether the SDK should be required or not
            during deployment of a version. It defaults to `true`.
          type: boolean
        is_pricing_visible:
          description: >-
            Determines if the pricing should be visible in the in-SDK pricing
            page. Defaults to true. Turn this off during the development of a
            new product.
          type: boolean
        is_wp_org_compliant:
          description: >-
            Set to true if the free version of the module is hosted on
            WordPress.org. Defaults to true.
          type: boolean
        installs_count:
          description: Total number of opted in sites which were logged with the SDK.
          type: integer
        active_installs_count:
          description: Total number of active sites where the SDK is active.
          type: integer
        free_releases_count:
          description: >-
            The number of "free" version of the product that were deployed from
            Freemius.
          type: integer
        premium_releases_count:
          description: >-
            The number of "premium" version of the product that were deployed
            from Freemius.
          type: integer
        total_purchases:
          description: Total number of payments recorded for the product.
          type: integer
        total_subscriptions:
          description: Total number of subscriptions recorded for the product.
          type: integer
        total_renewals:
          description: Total number of renewals recorded for the product.
          type: integer
        total_failed_purchases:
          description: Total number of failed payments recorded for the product.
          type: integer
          example: '1234'
        earnings:
          description: Total gross revenues.
          type: number
          format: float
          example: '1234.56'
        type:
          $ref: '#/components/schemas/CommonEnums/properties/ProductType'
        is_static:
          description: >-
            Determines whether the product is categorized as a static product
            (for example, a widget or a template).
          type: boolean
      type: object
    PluginTag:
      title: ProductTag
      description: >-
        A product tag represents a version of the product that is available for
        download by users.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        plugin_id:
          $ref: '#/components/schemas/CommonProperties/properties/plugin_id'
        developer_id:
          description: The ID of a developer.
          type: string
          format: int64
          minimum: 1
          example: '1234'
        slug:
          description: >-
            The `slug` of the product. This is auto-generated from your product
            settings.
          type: string
          example: my-freemius-plugin
          nullable: true
        premium_slug:
          description: >-
            The `slug` of the premium product. This is auto-generated from your
            product's settings.
          type: string
          example: my-freemius-plugin-pro
          nullable: true
        version:
          description: >-
            The version of the product. For WordPress.org products (plugins and
            themes), we recommend using semver semantics to support composer
            integration.
          type: string
          format: semver
          example: 1.0.0
        sdk_version:
          description: >-
            The Freemius SDK version. Only relevant for WordPress products using
            the Freemius [WP
            SDK](https://freemius.com/help/documentation/wordpress-sdk/).
          type: string
          example: 1.2.2
        requires_platform_version:
          description: The platform version required (e.g WordPress version).
          type: string
          example: 1.0.0
          nullable: true
        requires_programming_language_version:
          description: The programming language version (e.g PHP version).
          type: string
          example: '5.6'
          nullable: true
        tested_up_to_version:
          description: >-
            The tested platform version that the product is compatible (e.g
            WordPress version).
          type: string
          example: 1.0.0
          nullable: true
        downloaded:
          description: The number of times the product has been downloaded.
          type: integer
          minimum: 0
          example: '1234'
        has_free:
          description: If the product has a free version.
          type: boolean
        has_premium:
          description: If the product has a premium version.
          type: boolean
        release_mode:
          description: The release mode of the product.
          type: string
          enum:
            - released
            - pending
            - beta
        limit:
          description: >-
            The maximum number of downloads allowed for this version. This is
            used for [staged
            rollout](https://freemius.com/help/documentation/release-management/staged-rollouts/)
            of WordPress products. Unlimited number is set as `null`.
          type: integer
          minimum: 1
          example: '50'
        uniques:
          description: The number of unique users that have downloaded the product.
          type: integer
          minimum: 1
          example: '1234'
      type: object
    Setting:
      description: Settings associated with an element.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        setting_type:
          description: The type of the setting.
          type: integer
        element_id:
          description: The ID of the element the setting is associated with.
          type: string
          format: int64
          minimum: 1
          example: '1234'
        element_type:
          description: The type of the element. It is unique for each entity type.
          type: integer
        data:
          description: JSON encoded data of the settings.
          type: string
          format: json
          example: '{"key":"value"}'
      type: object
      x-internal: true
    Subscription:
      description: >-
        A subscription is created when a user uses [Freemius
        Checkout](https://freemius.com/wordpress/checkout/) to purchase or
        subscribe to a plan of a product.
      properties:
        user_id:
          $ref: '#/components/schemas/CommonProperties/properties/user_id'
        install_id:
          $ref: '#/components/schemas/CommonProperties/properties/install_id_nullable'
        plan_id:
          $ref: '#/components/schemas/CommonProperties/properties/plan_id'
        pricing_id:
          $ref: '#/components/schemas/CommonProperties/properties/pricing_id_nullable'
        license_id:
          $ref: '#/components/schemas/CommonProperties/properties/license_id'
        ip:
          $ref: '#/components/schemas/CommonProperties/properties/ip_nullable'
        country_code:
          $ref: '#/components/schemas/CommonProperties/properties/country_code'
        zip_postal_code:
          $ref: >-
            #/components/schemas/CommonProperties/properties/zip_postal_code_nullable
        vat_id:
          $ref: '#/components/schemas/CommonProperties/properties/vat_id_nullable'
        coupon_id:
          $ref: '#/components/schemas/CommonProperties/properties/coupon_id_nullable'
        user_card_id:
          description: The ID of the user card that was used for this payment.
          type: string
          format: int64
          example: '12345'
        source:
          $ref: '#/components/schemas/Migration/properties/source'
        plugin_id:
          $ref: '#/components/schemas/CommonProperties/properties/plugin_id'
        external_id:
          description: The external ID of the gateway entity.
          type: string
        gateway:
          description: >-
            The gateway used for the purchase. The gateway will be set to `null`
            when purchasing a product with a 100% discount.
          type: string
          nullable: true
        environment:
          $ref: '#/components/schemas/CommonProperties/properties/environment'
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        currency:
          $ref: '#/components/schemas/CommonEnums/properties/Currency'
        tax_rate:
          description: Tax rate in fraction. It will either be US sales tax or VAT.
          type: number
          format: float
          minimum: 0
          example: '1.00'
        total_gross:
          description: 'The total gross amount of the subscription, including taxes.'
          type: number
          format: float
          minimum: 0
          example: '1.21'
        amount_per_cycle:
          description: Plan's original amount per cycle (not including taxes).
          type: number
          format: float
          minimum: 0
          example: '1.00'
        initial_amount:
          description: Initial payment amount (not including taxes).
          type: number
          format: float
          minimum: 0
          example: '1.00'
        renewal_amount:
          description: Renewals amount (not including taxes).
          type: number
          format: float
          minimum: 0
          example: '1.00'
        renewals_discount:
          description: Renewals discount that will be applied to the chosen plan.
          type: integer
          minimum: 0
          example: '1'
        renewals_discount_type:
          $ref: '#/components/schemas/CommonEnums/properties/RenewalsDiscountType'
        billing_cycle:
          $ref: '#/components/schemas/CommonEnums/properties/BillingCycle'
        outstanding_balance:
          description: Any outstanding balance that the user has for this subscription.
          type: number
          format: float
          minimum: 0
          example: '1.00'
        failed_payments:
          description: Number of failed payments associated with the subscription.
          type: integer
          minimum: 0
          example: '1'
        trial_ends:
          description: >-
            The date time when the trial period ends. If null the subscription
            is not associated with a trial.
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
          nullable: true
        next_payment:
          description: 'Datetime of the next payment, or null if cancelled.'
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
          nullable: true
        canceled_at:
          description: Datetime of the cancellation.
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
          nullable: true
      type: object
    Trial:
      description: >-
        A trial represents a user's trial period for a product. Please read our
        [documentation](https://freemius.com/help/documentation/selling-with-freemius/free-trials/)
        to learn more about trials.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        plugin_id:
          $ref: '#/components/schemas/CommonProperties/properties/plugin_id'
        user_id:
          $ref: '#/components/schemas/CommonProperties/properties/user_id'
        payment_id:
          $ref: '#/components/schemas/CommonProperties/properties/payment_id_nullable'
        subscription_id:
          $ref: >-
            #/components/schemas/CommonProperties/properties/subscription_id_nullable
        license_id:
          $ref: '#/components/schemas/CommonProperties/properties/license_id_nullable'
        trial_ends_at:
          description: 'The date and time the trial ends, under UTC timezone.'
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
          nullable: false
        with_payment_method:
          description: >-
            Whether the trial was created with a payment method. Freemius
            supports both free and paid trials.
          type: boolean
        canceled_at:
          description: >-
            The date and time the trial was cancelled, under UTC timezone. If
            `null` the trial has not been cancelled.
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
          nullable: true
        converted_at:
          description: >-
            The date and time the trial was converted to a paid subscription or
            one-time purchase, under UTC timezone.

            If `null` the trial has not been converted.
          type: string
          format: date-time
          example: '2025-01-01 00:00:00'
          nullable: true
        environment:
          $ref: '#/components/schemas/CommonProperties/properties/environment'
      type: object
    Uninstall:
      description: >-
        An uninstall represents a user uninstalling a product from their site.
        This is different from deleting.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        plugin_id:
          $ref: '#/components/schemas/CommonProperties/properties/plugin_id'
        install_id:
          $ref: '#/components/schemas/CommonProperties/properties/install_id'
        site_id:
          description: The ID of the site.
          type: string
          format: int64
          minimum: 1
          example: '1234'
        reason_id:
          description: |-

            Uninstall reason. Possible values:

            * `1` - No longer needed
            * `2` - Found a better alternative
            * `3` - Only needed for short period
            * `4` - Broke the website
            * `5` - Suddenly stopped working
            * `6` - Cannot continue paying
            * `7` - Other
            * `8` - Didn't work after installation
            * `9` - User doesn't like to share data
            * `10` - Didn't understand how it works
            * `11` - Missing specific feature
            * `12` - Didn't work
            * `13` - Expected something else
            * `14` - Expected to work differently
            * `15` - Temporary deactivation
                    
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
            - 10
            - 11
            - 12
            - 13
            - 14
            - 15
          example: 1
        reason_info:
          description: >-
            Additional information gathered from the user for the
            uninstallation. This is populated when the product user chooses
            “Other” in contrast to pre-set options.
          type: string
      type: object
    User:
      description: >-
        A **User** is a person who is registered to Freemius through some usage
        of one or more products selling through Freemius. The user could own
        licenses of such products or simply could have been linked to the Free
        version of the products. Every user has unique email address.
      properties:
        note:
          description: A note about the user. Only visible to the developer.
          type: string
        is_marketing_allowed:
          description: >-
            Whether or not the user has given their consent to market. A `null`
            value indicates that the user has not made a decision yet.
          type: boolean
          nullable: true
        is_beta:
          description: Whether or not the user has opted-in to beta versions.
          type: boolean
        email:
          description: Email address of the person.
          type: string
          example: jane@example.com
        first:
          description: First name of the person.
          type: string
          example: Jane
        last:
          description: Last name of the person.
          type: string
          example: Doe
        picture:
          description: Profile picture URL.
          type: string
          example: 'https://example.com/profile-pic.jpg'
        ip:
          description: The IP address (v4 or v6).
          type: string
          format: ipv4|ipv6
          example: 127.0.0.1
          nullable: true
        is_verified:
          description: Whether the person is trusted or not.
          type: boolean
          example: 'true'
        auth:
          $ref: '#/components/schemas/CommonEnums/properties/AuthenticationType'
        secret_key:
          description: The secret key associated with the entity for authorization.
          type: string
          example: sk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
        public_key:
          description: The public key associated with the entity for authorization.
          type: string
          example: pk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        gross:
          description: The total amount of money the user has spent on the platform.
          type: number
          format: float
        last_login_at:
          description: Date and time of the last login.
          type: string
          format: date-time
          example: '2025-07-30 05:56:29'
          nullable: true
        email_status:
          $ref: '#/components/schemas/CommonEnums/properties/EmailStatus'
      type: object
    Affiliate:
      description: >-
        An affiliate is individual or businesses that promotes and sells
        products or services in exchange for a commission on each sale.
      properties:
        id:
          $ref: '#/components/schemas/CommonProperties/properties/id'
        created:
          $ref: '#/components/schemas/CommonProperties/properties/created'
        updated:
          $ref: '#/components/schemas/CommonProperties/properties/updated'
        user_id:
          $ref: '#/components/schemas/CommonProperties/properties/user_id'
        ip:
          $ref: '#/components/schemas/CommonProperties/properties/ip'
        paypal_email:
          description: The PayPal email for payout purposes.
          type: string
          example: foo@freemius.com
        plugin_id:
          $ref: '#/components/schemas/CommonProperties/properties/plugin_id'
        affiliate_terms_id:
          description: The ID of the affiliate terms.
          type: string
          format: int64
          minimum: 1
          example: '1234'
        custom_affiliate_terms_id:
          description: The ID of the custom affiliate terms.
          type: string
          format: int64
          minimum: 1
          example: '1234'
        is_using_custom_terms:
          description: Whether the affiliate is using custom terms.
          type: boolean
        status:
          description: The status of the affiliate signup.
          type: string
          default: '\Freemius\Entities\Affiliation\Affiliate::STATE_PENDING'
          enum:
            - pending
            - rejected
            - suspended
            - active
        domain:
          description: The domain of the affiliate.
          type: string
          example: 'https://awesome-products.com'
        earnings:
          description: The earnings of the affiliate from sales.
          type: number
          format: float
          minimum: 0
          example: '2000.45'
        pending_referrals:
          description: The number of unapproved/pending referrals.
          type: number
          minimum: 1
          example: '1234'
        visits:
          description: The number of visits through the affiliate link.
          type: integer
          minimum: 1
          example: '1234'
        unique_visits:
          description: The number of unique visits through the affiliate link.
          type: integer
          minimum: 1
          example: '1234'
      type: object
  responses:
    '204':
      description: >-
        The API has no content to send. This usually happens when some entity is
        deleted.
    '400':
      description: >-
        Bad request. The request could not be understood by the server due to
        malformed syntax or arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    '401':
      description: >-
        Unauthorized access error. The request requires [authentication](/) but
        was not provided or the provided authentication does not satisfy the
        required permissions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    '402':
      description: The request is missing the specified argument.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    '404':
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
  parameters:
    developer_id:
      name: developer_id
      in: path
      description: The ID of the developer.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    store_id:
      name: store_id
      in: path
      description: The ID of the store.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    plugin_id:
      name: plugin_id
      in: path
      description: The ID of the product.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    product_id:
      name: product_id
      in: path
      description: The ID of the product.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    bank_account_id:
      name: bank_account_id
      in: path
      description: The ID of the bank account.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    cart_id:
      name: cart_id
      in: path
      description: The ID of the Cart.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    setting_id:
      name: setting_id
      in: path
      description: The ID of the setting.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    payment_id:
      name: payment_id
      in: path
      description: The ID of the payment.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    install_id:
      name: install_id
      in: path
      description: The ID of the install.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    clone_id:
      name: clone_id
      in: path
      description: The ID of the clone.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    plan_id:
      name: plan_id
      in: path
      description: The ID of the plan.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    license_id:
      name: license_id
      in: path
      description: The ID of the License.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    user_id:
      name: user_id
      in: path
      description: The ID of the User.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    subscription_id:
      name: subscription_id
      in: path
      description: The ID of the Subscription.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    pricing_id:
      name: pricing_id
      in: path
      description: The ID of the Pricing.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: '1234'
    fields:
      name: fields
      in: query
      description: >-
        Comma separated list of fields to return in the response. If not
        specified, all fields are returned.
      required: false
      schema:
        type: string
      example: 'id,name,slug'
    count:
      name: count
      in: query
      description: The number of records to return.
      required: false
      schema:
        type: integer
        default: 25
        maximum: 50
        minimum: 1
      example: '10'
    offset:
      name: offset
      in: query
      description: >-
        The number of records to skip before starting to return records. Default
        is 0.
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0
      example: '10'
    gateway:
      name: gateway
      in: query
      description: Filter by gateway.
      required: false
      schema:
        type: string
        enum:
          - paypal
          - stripe
      example: stripe
    from:
      name: from
      in: query
      description: 'The start of the date range in YYYY-MM-DD HH:MM:SS format'
      required: false
      schema:
        type: string
        format: date-time
      example: '2025-08-01 00:00:00'
    to:
      name: to
      in: query
      description: 'The end of the date range in YYYY-MM-DD HH:MM:SS format'
      required: false
      schema:
        type: string
        format: date-time
      example: '2025-08-01 00:00:00'
    billing_cycle:
      name: billing_cycle
      in: query
      description: Filter by billing cycle.
      required: false
      schema:
        $ref: '#/components/schemas/CommonEnums/properties/BillingCycle'
    uid:
      name: uid
      in: query
      description: The Unique identifier. It is a 32 characters long string.
      required: true
      schema:
        type: string
        format: uid
        maxLength: 32
        minLength: 32
  securitySchemes:
    ApiAuthBearer:
      type: http
      description: >

        The access token you generated for the scope entity. The token has a
        format `Bearer {API_Key}`. You can get the API Key from the [Freemius
        Developer Dashboard](https://dashboard.freemius.com) for a product or a
        store.


        ### Retrieving an API Key


        1. Go to the settings page of a product or a store in the Freemius
        Developer Dashboard.

        2. Select the **API Key** tab.

        3. Copy the key.


        To regenerate the API Key you will need to regenerate the secret key of
        the product or the store. This can be done from the `Information` tab of
        the `Settings` page.
      bearerFormat: AccessToken
      scheme: bearer
    ApiAuthFSAHeader:
      type: apiKey
      description: >

        The token starts with "`FSA {scope_entity_id}:{access_token}`" and must
        be present in the header `Authorization`.


        > This is supported for the developer scope entity only at the moment.


        You must call the login endpoint to automatically generate and store the
        cookie.
      name: Authorization
      in: header
    ApiAuthFSACookie:
      type: apiKey
      description: >

        The token starts with "`FSA {scope_entity_id}:{access_token}`" and must
        be present in an `httpOnly` cookie named `fsa_access_token`.


        > This is supported for the developer scope entity only at the moment.


        You must call the login endpoint to automatically generate and store the
        cookie.
      name: fsa_access_token
      in: cookie
security:
  - ApiAuthBearer: []
tags:
  - name: Product
    description: All operations which can be done on a product.
  - name: 'Developer [REMOVE ME]'
    description: All operations which can be done from on a developer.
  - name: Subscription
    description: All operations associated to a subscription.
  - name: User
    description: >-
      All operations which can be done on a user belonging to a store or a
      product.
  - name: License
    description: >-
      All operations which can be done on a license belonging to a store or a
      product.
  - name: Coupon
    description: >-
      All operations which can be done on a coupon belonging to a store or a
      product.
  - name: Cart
    description: >-
      All operations which can be done on a cart belonging to a store or a
      product.
  - name: Payment
    description: All operations associated to a payment.
  - name: Installation
    description: Operations related to the installation of a product.
  - name: Trial
    description: Operations related to a trial license of a product.
externalDocs:
  description: Learn more about Freemius API
  url: 'https://freemius.com/help/documentation/'
